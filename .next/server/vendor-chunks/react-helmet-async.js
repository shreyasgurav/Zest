"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-helmet-async";
exports.ids = ["vendor-chunks/react-helmet-async"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-helmet-async/lib/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-helmet-async/lib/index.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Helmet: () => (/* binding */ Helmet),\n/* harmony export */   HelmetData: () => (/* binding */ HelmetData),\n/* harmony export */   HelmetProvider: () => (/* binding */ HelmetProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_fast_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\");\n/* harmony import */ var react_fast_compare__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_fast_compare__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! invariant */ \"(ssr)/./node_modules/invariant/invariant.js\");\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(invariant__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shallowequal */ \"(ssr)/./node_modules/shallowequal/index.js\");\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_3__);\n// src/index.tsx\n\n\n\n\n// src/Provider.tsx\n\n\n// src/server.ts\n\n\n// src/constants.ts\nvar TAG_NAMES = /* @__PURE__ */ ((TAG_NAMES2) => {\n  TAG_NAMES2[\"BASE\"] = \"base\";\n  TAG_NAMES2[\"BODY\"] = \"body\";\n  TAG_NAMES2[\"HEAD\"] = \"head\";\n  TAG_NAMES2[\"HTML\"] = \"html\";\n  TAG_NAMES2[\"LINK\"] = \"link\";\n  TAG_NAMES2[\"META\"] = \"meta\";\n  TAG_NAMES2[\"NOSCRIPT\"] = \"noscript\";\n  TAG_NAMES2[\"SCRIPT\"] = \"script\";\n  TAG_NAMES2[\"STYLE\"] = \"style\";\n  TAG_NAMES2[\"TITLE\"] = \"title\";\n  TAG_NAMES2[\"FRAGMENT\"] = \"Symbol(react.fragment)\";\n  return TAG_NAMES2;\n})(TAG_NAMES || {});\nvar SEO_PRIORITY_TAGS = {\n  link: { rel: [\"amphtml\", \"canonical\", \"alternate\"] },\n  script: { type: [\"application/ld+json\"] },\n  meta: {\n    charset: \"\",\n    name: [\"generator\", \"robots\", \"description\"],\n    property: [\n      \"og:type\",\n      \"og:title\",\n      \"og:url\",\n      \"og:image\",\n      \"og:image:alt\",\n      \"og:description\",\n      \"twitter:url\",\n      \"twitter:title\",\n      \"twitter:description\",\n      \"twitter:image\",\n      \"twitter:image:alt\",\n      \"twitter:card\",\n      \"twitter:site\"\n    ]\n  }\n};\nvar VALID_TAG_NAMES = Object.values(TAG_NAMES);\nvar REACT_TAG_MAP = {\n  accesskey: \"accessKey\",\n  charset: \"charSet\",\n  class: \"className\",\n  contenteditable: \"contentEditable\",\n  contextmenu: \"contextMenu\",\n  \"http-equiv\": \"httpEquiv\",\n  itemprop: \"itemProp\",\n  tabindex: \"tabIndex\"\n};\nvar HTML_TAG_MAP = Object.entries(REACT_TAG_MAP).reduce(\n  (carry, [key, value]) => {\n    carry[value] = key;\n    return carry;\n  },\n  {}\n);\nvar HELMET_ATTRIBUTE = \"data-rh\";\n\n// src/utils.ts\nvar HELMET_PROPS = {\n  DEFAULT_TITLE: \"defaultTitle\",\n  DEFER: \"defer\",\n  ENCODE_SPECIAL_CHARACTERS: \"encodeSpecialCharacters\",\n  ON_CHANGE_CLIENT_STATE: \"onChangeClientState\",\n  TITLE_TEMPLATE: \"titleTemplate\",\n  PRIORITIZE_SEO_TAGS: \"prioritizeSeoTags\"\n};\nvar getInnermostProperty = (propsList, property) => {\n  for (let i = propsList.length - 1; i >= 0; i -= 1) {\n    const props = propsList[i];\n    if (Object.prototype.hasOwnProperty.call(props, property)) {\n      return props[property];\n    }\n  }\n  return null;\n};\nvar getTitleFromPropsList = (propsList) => {\n  let innermostTitle = getInnermostProperty(propsList, \"title\" /* TITLE */);\n  const innermostTemplate = getInnermostProperty(propsList, HELMET_PROPS.TITLE_TEMPLATE);\n  if (Array.isArray(innermostTitle)) {\n    innermostTitle = innermostTitle.join(\"\");\n  }\n  if (innermostTemplate && innermostTitle) {\n    return innermostTemplate.replace(/%s/g, () => innermostTitle);\n  }\n  const innermostDefaultTitle = getInnermostProperty(propsList, HELMET_PROPS.DEFAULT_TITLE);\n  return innermostTitle || innermostDefaultTitle || void 0;\n};\nvar getOnChangeClientState = (propsList) => getInnermostProperty(propsList, HELMET_PROPS.ON_CHANGE_CLIENT_STATE) || (() => {\n});\nvar getAttributesFromPropsList = (tagType, propsList) => propsList.filter((props) => typeof props[tagType] !== \"undefined\").map((props) => props[tagType]).reduce((tagAttrs, current) => ({ ...tagAttrs, ...current }), {});\nvar getBaseTagFromPropsList = (primaryAttributes, propsList) => propsList.filter((props) => typeof props[\"base\" /* BASE */] !== \"undefined\").map((props) => props[\"base\" /* BASE */]).reverse().reduce((innermostBaseTag, tag) => {\n  if (!innermostBaseTag.length) {\n    const keys = Object.keys(tag);\n    for (let i = 0; i < keys.length; i += 1) {\n      const attributeKey = keys[i];\n      const lowerCaseAttributeKey = attributeKey.toLowerCase();\n      if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && tag[lowerCaseAttributeKey]) {\n        return innermostBaseTag.concat(tag);\n      }\n    }\n  }\n  return innermostBaseTag;\n}, []);\nvar warn = (msg) => console && typeof console.warn === \"function\" && console.warn(msg);\nvar getTagsFromPropsList = (tagName, primaryAttributes, propsList) => {\n  const approvedSeenTags = {};\n  return propsList.filter((props) => {\n    if (Array.isArray(props[tagName])) {\n      return true;\n    }\n    if (typeof props[tagName] !== \"undefined\") {\n      warn(\n        `Helmet: ${tagName} should be of type \"Array\". Instead found type \"${typeof props[tagName]}\"`\n      );\n    }\n    return false;\n  }).map((props) => props[tagName]).reverse().reduce((approvedTags, instanceTags) => {\n    const instanceSeenTags = {};\n    instanceTags.filter((tag) => {\n      let primaryAttributeKey;\n      const keys2 = Object.keys(tag);\n      for (let i = 0; i < keys2.length; i += 1) {\n        const attributeKey = keys2[i];\n        const lowerCaseAttributeKey = attributeKey.toLowerCase();\n        if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && !(primaryAttributeKey === \"rel\" /* REL */ && tag[primaryAttributeKey].toLowerCase() === \"canonical\") && !(lowerCaseAttributeKey === \"rel\" /* REL */ && tag[lowerCaseAttributeKey].toLowerCase() === \"stylesheet\")) {\n          primaryAttributeKey = lowerCaseAttributeKey;\n        }\n        if (primaryAttributes.indexOf(attributeKey) !== -1 && (attributeKey === \"innerHTML\" /* INNER_HTML */ || attributeKey === \"cssText\" /* CSS_TEXT */ || attributeKey === \"itemprop\" /* ITEM_PROP */)) {\n          primaryAttributeKey = attributeKey;\n        }\n      }\n      if (!primaryAttributeKey || !tag[primaryAttributeKey]) {\n        return false;\n      }\n      const value = tag[primaryAttributeKey].toLowerCase();\n      if (!approvedSeenTags[primaryAttributeKey]) {\n        approvedSeenTags[primaryAttributeKey] = {};\n      }\n      if (!instanceSeenTags[primaryAttributeKey]) {\n        instanceSeenTags[primaryAttributeKey] = {};\n      }\n      if (!approvedSeenTags[primaryAttributeKey][value]) {\n        instanceSeenTags[primaryAttributeKey][value] = true;\n        return true;\n      }\n      return false;\n    }).reverse().forEach((tag) => approvedTags.push(tag));\n    const keys = Object.keys(instanceSeenTags);\n    for (let i = 0; i < keys.length; i += 1) {\n      const attributeKey = keys[i];\n      const tagUnion = {\n        ...approvedSeenTags[attributeKey],\n        ...instanceSeenTags[attributeKey]\n      };\n      approvedSeenTags[attributeKey] = tagUnion;\n    }\n    return approvedTags;\n  }, []).reverse();\n};\nvar getAnyTrueFromPropsList = (propsList, checkedTag) => {\n  if (Array.isArray(propsList) && propsList.length) {\n    for (let index = 0; index < propsList.length; index += 1) {\n      const prop = propsList[index];\n      if (prop[checkedTag]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nvar reducePropsToState = (propsList) => ({\n  baseTag: getBaseTagFromPropsList([\"href\" /* HREF */], propsList),\n  bodyAttributes: getAttributesFromPropsList(\"bodyAttributes\" /* BODY */, propsList),\n  defer: getInnermostProperty(propsList, HELMET_PROPS.DEFER),\n  encode: getInnermostProperty(propsList, HELMET_PROPS.ENCODE_SPECIAL_CHARACTERS),\n  htmlAttributes: getAttributesFromPropsList(\"htmlAttributes\" /* HTML */, propsList),\n  linkTags: getTagsFromPropsList(\n    \"link\" /* LINK */,\n    [\"rel\" /* REL */, \"href\" /* HREF */],\n    propsList\n  ),\n  metaTags: getTagsFromPropsList(\n    \"meta\" /* META */,\n    [\n      \"name\" /* NAME */,\n      \"charset\" /* CHARSET */,\n      \"http-equiv\" /* HTTPEQUIV */,\n      \"property\" /* PROPERTY */,\n      \"itemprop\" /* ITEM_PROP */\n    ],\n    propsList\n  ),\n  noscriptTags: getTagsFromPropsList(\"noscript\" /* NOSCRIPT */, [\"innerHTML\" /* INNER_HTML */], propsList),\n  onChangeClientState: getOnChangeClientState(propsList),\n  scriptTags: getTagsFromPropsList(\n    \"script\" /* SCRIPT */,\n    [\"src\" /* SRC */, \"innerHTML\" /* INNER_HTML */],\n    propsList\n  ),\n  styleTags: getTagsFromPropsList(\"style\" /* STYLE */, [\"cssText\" /* CSS_TEXT */], propsList),\n  title: getTitleFromPropsList(propsList),\n  titleAttributes: getAttributesFromPropsList(\"titleAttributes\" /* TITLE */, propsList),\n  prioritizeSeoTags: getAnyTrueFromPropsList(propsList, HELMET_PROPS.PRIORITIZE_SEO_TAGS)\n});\nvar flattenArray = (possibleArray) => Array.isArray(possibleArray) ? possibleArray.join(\"\") : possibleArray;\nvar checkIfPropsMatch = (props, toMatch) => {\n  const keys = Object.keys(props);\n  for (let i = 0; i < keys.length; i += 1) {\n    if (toMatch[keys[i]] && toMatch[keys[i]].includes(props[keys[i]])) {\n      return true;\n    }\n  }\n  return false;\n};\nvar prioritizer = (elementsList, propsToMatch) => {\n  if (Array.isArray(elementsList)) {\n    return elementsList.reduce(\n      (acc, elementAttrs) => {\n        if (checkIfPropsMatch(elementAttrs, propsToMatch)) {\n          acc.priority.push(elementAttrs);\n        } else {\n          acc.default.push(elementAttrs);\n        }\n        return acc;\n      },\n      { priority: [], default: [] }\n    );\n  }\n  return { default: elementsList, priority: [] };\n};\nvar without = (obj, key) => {\n  return {\n    ...obj,\n    [key]: void 0\n  };\n};\n\n// src/server.ts\nvar SELF_CLOSING_TAGS = [\"noscript\" /* NOSCRIPT */, \"script\" /* SCRIPT */, \"style\" /* STYLE */];\nvar encodeSpecialCharacters = (str, encode = true) => {\n  if (encode === false) {\n    return String(str);\n  }\n  return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\");\n};\nvar generateElementAttributesAsString = (attributes) => Object.keys(attributes).reduce((str, key) => {\n  const attr = typeof attributes[key] !== \"undefined\" ? `${key}=\"${attributes[key]}\"` : `${key}`;\n  return str ? `${str} ${attr}` : attr;\n}, \"\");\nvar generateTitleAsString = (type, title, attributes, encode) => {\n  const attributeString = generateElementAttributesAsString(attributes);\n  const flattenedTitle = flattenArray(title);\n  return attributeString ? `<${type} ${HELMET_ATTRIBUTE}=\"true\" ${attributeString}>${encodeSpecialCharacters(\n    flattenedTitle,\n    encode\n  )}</${type}>` : `<${type} ${HELMET_ATTRIBUTE}=\"true\">${encodeSpecialCharacters(\n    flattenedTitle,\n    encode\n  )}</${type}>`;\n};\nvar generateTagsAsString = (type, tags, encode = true) => tags.reduce((str, t) => {\n  const tag = t;\n  const attributeHtml = Object.keys(tag).filter(\n    (attribute) => !(attribute === \"innerHTML\" /* INNER_HTML */ || attribute === \"cssText\" /* CSS_TEXT */)\n  ).reduce((string, attribute) => {\n    const attr = typeof tag[attribute] === \"undefined\" ? attribute : `${attribute}=\"${encodeSpecialCharacters(tag[attribute], encode)}\"`;\n    return string ? `${string} ${attr}` : attr;\n  }, \"\");\n  const tagContent = tag.innerHTML || tag.cssText || \"\";\n  const isSelfClosing = SELF_CLOSING_TAGS.indexOf(type) === -1;\n  return `${str}<${type} ${HELMET_ATTRIBUTE}=\"true\" ${attributeHtml}${isSelfClosing ? `/>` : `>${tagContent}</${type}>`}`;\n}, \"\");\nvar convertElementAttributesToReactProps = (attributes, initProps = {}) => Object.keys(attributes).reduce((obj, key) => {\n  const mapped = REACT_TAG_MAP[key];\n  obj[mapped || key] = attributes[key];\n  return obj;\n}, initProps);\nvar generateTitleAsReactComponent = (_type, title, attributes) => {\n  const initProps = {\n    key: title,\n    [HELMET_ATTRIBUTE]: true\n  };\n  const props = convertElementAttributesToReactProps(attributes, initProps);\n  return [react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"title\" /* TITLE */, props, title)];\n};\nvar generateTagsAsReactComponent = (type, tags) => tags.map((tag, i) => {\n  const mappedTag = {\n    key: i,\n    [HELMET_ATTRIBUTE]: true\n  };\n  Object.keys(tag).forEach((attribute) => {\n    const mapped = REACT_TAG_MAP[attribute];\n    const mappedAttribute = mapped || attribute;\n    if (mappedAttribute === \"innerHTML\" /* INNER_HTML */ || mappedAttribute === \"cssText\" /* CSS_TEXT */) {\n      const content = tag.innerHTML || tag.cssText;\n      mappedTag.dangerouslySetInnerHTML = { __html: content };\n    } else {\n      mappedTag[mappedAttribute] = tag[attribute];\n    }\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(type, mappedTag);\n});\nvar getMethodsForTag = (type, tags, encode = true) => {\n  switch (type) {\n    case \"title\" /* TITLE */:\n      return {\n        toComponent: () => generateTitleAsReactComponent(type, tags.title, tags.titleAttributes),\n        toString: () => generateTitleAsString(type, tags.title, tags.titleAttributes, encode)\n      };\n    case \"bodyAttributes\" /* BODY */:\n    case \"htmlAttributes\" /* HTML */:\n      return {\n        toComponent: () => convertElementAttributesToReactProps(tags),\n        toString: () => generateElementAttributesAsString(tags)\n      };\n    default:\n      return {\n        toComponent: () => generateTagsAsReactComponent(type, tags),\n        toString: () => generateTagsAsString(type, tags, encode)\n      };\n  }\n};\nvar getPriorityMethods = ({ metaTags, linkTags, scriptTags, encode }) => {\n  const meta = prioritizer(metaTags, SEO_PRIORITY_TAGS.meta);\n  const link = prioritizer(linkTags, SEO_PRIORITY_TAGS.link);\n  const script = prioritizer(scriptTags, SEO_PRIORITY_TAGS.script);\n  const priorityMethods = {\n    toComponent: () => [\n      ...generateTagsAsReactComponent(\"meta\" /* META */, meta.priority),\n      ...generateTagsAsReactComponent(\"link\" /* LINK */, link.priority),\n      ...generateTagsAsReactComponent(\"script\" /* SCRIPT */, script.priority)\n    ],\n    toString: () => (\n      // generate all the tags as strings and concatenate them\n      `${getMethodsForTag(\"meta\" /* META */, meta.priority, encode)} ${getMethodsForTag(\n        \"link\" /* LINK */,\n        link.priority,\n        encode\n      )} ${getMethodsForTag(\"script\" /* SCRIPT */, script.priority, encode)}`\n    )\n  };\n  return {\n    priorityMethods,\n    metaTags: meta.default,\n    linkTags: link.default,\n    scriptTags: script.default\n  };\n};\nvar mapStateOnServer = (props) => {\n  const {\n    baseTag,\n    bodyAttributes,\n    encode = true,\n    htmlAttributes,\n    noscriptTags,\n    styleTags,\n    title = \"\",\n    titleAttributes,\n    prioritizeSeoTags\n  } = props;\n  let { linkTags, metaTags, scriptTags } = props;\n  let priorityMethods = {\n    toComponent: () => {\n    },\n    toString: () => \"\"\n  };\n  if (prioritizeSeoTags) {\n    ({ priorityMethods, linkTags, metaTags, scriptTags } = getPriorityMethods(props));\n  }\n  return {\n    priority: priorityMethods,\n    base: getMethodsForTag(\"base\" /* BASE */, baseTag, encode),\n    bodyAttributes: getMethodsForTag(\"bodyAttributes\" /* BODY */, bodyAttributes, encode),\n    htmlAttributes: getMethodsForTag(\"htmlAttributes\" /* HTML */, htmlAttributes, encode),\n    link: getMethodsForTag(\"link\" /* LINK */, linkTags, encode),\n    meta: getMethodsForTag(\"meta\" /* META */, metaTags, encode),\n    noscript: getMethodsForTag(\"noscript\" /* NOSCRIPT */, noscriptTags, encode),\n    script: getMethodsForTag(\"script\" /* SCRIPT */, scriptTags, encode),\n    style: getMethodsForTag(\"style\" /* STYLE */, styleTags, encode),\n    title: getMethodsForTag(\"title\" /* TITLE */, { title, titleAttributes }, encode)\n  };\n};\nvar server_default = mapStateOnServer;\n\n// src/HelmetData.ts\nvar instances = [];\nvar isDocument = !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\nvar HelmetData = class {\n  instances = [];\n  canUseDOM = isDocument;\n  context;\n  value = {\n    setHelmet: (serverState) => {\n      this.context.helmet = serverState;\n    },\n    helmetInstances: {\n      get: () => this.canUseDOM ? instances : this.instances,\n      add: (instance) => {\n        (this.canUseDOM ? instances : this.instances).push(instance);\n      },\n      remove: (instance) => {\n        const index = (this.canUseDOM ? instances : this.instances).indexOf(instance);\n        (this.canUseDOM ? instances : this.instances).splice(index, 1);\n      }\n    }\n  };\n  constructor(context, canUseDOM) {\n    this.context = context;\n    this.canUseDOM = canUseDOM || false;\n    if (!canUseDOM) {\n      context.helmet = server_default({\n        baseTag: [],\n        bodyAttributes: {},\n        encodeSpecialCharacters: true,\n        htmlAttributes: {},\n        linkTags: [],\n        metaTags: [],\n        noscriptTags: [],\n        scriptTags: [],\n        styleTags: [],\n        title: \"\",\n        titleAttributes: {}\n      });\n    }\n  }\n};\n\n// src/Provider.tsx\nvar defaultValue = {};\nvar Context = react__WEBPACK_IMPORTED_MODULE_0___default().createContext(defaultValue);\nvar HelmetProvider = class _HelmetProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  static canUseDOM = isDocument;\n  helmetData;\n  constructor(props) {\n    super(props);\n    this.helmetData = new HelmetData(this.props.context || {}, _HelmetProvider.canUseDOM);\n  }\n  render() {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, { value: this.helmetData.value }, this.props.children);\n  }\n};\n\n// src/Dispatcher.tsx\n\n\n\n// src/client.ts\nvar updateTags = (type, tags) => {\n  const headElement = document.head || document.querySelector(\"head\" /* HEAD */);\n  const tagNodes = headElement.querySelectorAll(`${type}[${HELMET_ATTRIBUTE}]`);\n  const oldTags = [].slice.call(tagNodes);\n  const newTags = [];\n  let indexToDelete;\n  if (tags && tags.length) {\n    tags.forEach((tag) => {\n      const newElement = document.createElement(type);\n      for (const attribute in tag) {\n        if (Object.prototype.hasOwnProperty.call(tag, attribute)) {\n          if (attribute === \"innerHTML\" /* INNER_HTML */) {\n            newElement.innerHTML = tag.innerHTML;\n          } else if (attribute === \"cssText\" /* CSS_TEXT */) {\n            if (newElement.styleSheet) {\n              newElement.styleSheet.cssText = tag.cssText;\n            } else {\n              newElement.appendChild(document.createTextNode(tag.cssText));\n            }\n          } else {\n            const attr = attribute;\n            const value = typeof tag[attr] === \"undefined\" ? \"\" : tag[attr];\n            newElement.setAttribute(attribute, value);\n          }\n        }\n      }\n      newElement.setAttribute(HELMET_ATTRIBUTE, \"true\");\n      if (oldTags.some((existingTag, index) => {\n        indexToDelete = index;\n        return newElement.isEqualNode(existingTag);\n      })) {\n        oldTags.splice(indexToDelete, 1);\n      } else {\n        newTags.push(newElement);\n      }\n    });\n  }\n  oldTags.forEach((tag) => tag.parentNode?.removeChild(tag));\n  newTags.forEach((tag) => headElement.appendChild(tag));\n  return {\n    oldTags,\n    newTags\n  };\n};\nvar updateAttributes = (tagName, attributes) => {\n  const elementTag = document.getElementsByTagName(tagName)[0];\n  if (!elementTag) {\n    return;\n  }\n  const helmetAttributeString = elementTag.getAttribute(HELMET_ATTRIBUTE);\n  const helmetAttributes = helmetAttributeString ? helmetAttributeString.split(\",\") : [];\n  const attributesToRemove = [...helmetAttributes];\n  const attributeKeys = Object.keys(attributes);\n  for (const attribute of attributeKeys) {\n    const value = attributes[attribute] || \"\";\n    if (elementTag.getAttribute(attribute) !== value) {\n      elementTag.setAttribute(attribute, value);\n    }\n    if (helmetAttributes.indexOf(attribute) === -1) {\n      helmetAttributes.push(attribute);\n    }\n    const indexToSave = attributesToRemove.indexOf(attribute);\n    if (indexToSave !== -1) {\n      attributesToRemove.splice(indexToSave, 1);\n    }\n  }\n  for (let i = attributesToRemove.length - 1; i >= 0; i -= 1) {\n    elementTag.removeAttribute(attributesToRemove[i]);\n  }\n  if (helmetAttributes.length === attributesToRemove.length) {\n    elementTag.removeAttribute(HELMET_ATTRIBUTE);\n  } else if (elementTag.getAttribute(HELMET_ATTRIBUTE) !== attributeKeys.join(\",\")) {\n    elementTag.setAttribute(HELMET_ATTRIBUTE, attributeKeys.join(\",\"));\n  }\n};\nvar updateTitle = (title, attributes) => {\n  if (typeof title !== \"undefined\" && document.title !== title) {\n    document.title = flattenArray(title);\n  }\n  updateAttributes(\"title\" /* TITLE */, attributes);\n};\nvar commitTagChanges = (newState, cb) => {\n  const {\n    baseTag,\n    bodyAttributes,\n    htmlAttributes,\n    linkTags,\n    metaTags,\n    noscriptTags,\n    onChangeClientState,\n    scriptTags,\n    styleTags,\n    title,\n    titleAttributes\n  } = newState;\n  updateAttributes(\"body\" /* BODY */, bodyAttributes);\n  updateAttributes(\"html\" /* HTML */, htmlAttributes);\n  updateTitle(title, titleAttributes);\n  const tagUpdates = {\n    baseTag: updateTags(\"base\" /* BASE */, baseTag),\n    linkTags: updateTags(\"link\" /* LINK */, linkTags),\n    metaTags: updateTags(\"meta\" /* META */, metaTags),\n    noscriptTags: updateTags(\"noscript\" /* NOSCRIPT */, noscriptTags),\n    scriptTags: updateTags(\"script\" /* SCRIPT */, scriptTags),\n    styleTags: updateTags(\"style\" /* STYLE */, styleTags)\n  };\n  const addedTags = {};\n  const removedTags = {};\n  Object.keys(tagUpdates).forEach((tagType) => {\n    const { newTags, oldTags } = tagUpdates[tagType];\n    if (newTags.length) {\n      addedTags[tagType] = newTags;\n    }\n    if (oldTags.length) {\n      removedTags[tagType] = tagUpdates[tagType].oldTags;\n    }\n  });\n  if (cb) {\n    cb();\n  }\n  onChangeClientState(newState, addedTags, removedTags);\n};\nvar _helmetCallback = null;\nvar handleStateChangeOnClient = (newState) => {\n  if (_helmetCallback) {\n    cancelAnimationFrame(_helmetCallback);\n  }\n  if (newState.defer) {\n    _helmetCallback = requestAnimationFrame(() => {\n      commitTagChanges(newState, () => {\n        _helmetCallback = null;\n      });\n    });\n  } else {\n    commitTagChanges(newState);\n    _helmetCallback = null;\n  }\n};\nvar client_default = handleStateChangeOnClient;\n\n// src/Dispatcher.tsx\nvar HelmetDispatcher = class extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  rendered = false;\n  shouldComponentUpdate(nextProps) {\n    return !shallowequal__WEBPACK_IMPORTED_MODULE_3___default()(nextProps, this.props);\n  }\n  componentDidUpdate() {\n    this.emitChange();\n  }\n  componentWillUnmount() {\n    const { helmetInstances } = this.props.context;\n    helmetInstances.remove(this);\n    this.emitChange();\n  }\n  emitChange() {\n    const { helmetInstances, setHelmet } = this.props.context;\n    let serverState = null;\n    const state = reducePropsToState(\n      helmetInstances.get().map((instance) => {\n        const props = { ...instance.props };\n        delete props.context;\n        return props;\n      })\n    );\n    if (HelmetProvider.canUseDOM) {\n      client_default(state);\n    } else if (server_default) {\n      serverState = server_default(state);\n    }\n    setHelmet(serverState);\n  }\n  // componentWillMount will be deprecated\n  // for SSR, initialize on first render\n  // constructor is also unsafe in StrictMode\n  init() {\n    if (this.rendered) {\n      return;\n    }\n    this.rendered = true;\n    const { helmetInstances } = this.props.context;\n    helmetInstances.add(this);\n    this.emitChange();\n  }\n  render() {\n    this.init();\n    return null;\n  }\n};\n\n// src/index.tsx\nvar Helmet = class extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  static defaultProps = {\n    defer: true,\n    encodeSpecialCharacters: true,\n    prioritizeSeoTags: false\n  };\n  shouldComponentUpdate(nextProps) {\n    return !react_fast_compare__WEBPACK_IMPORTED_MODULE_1___default()(without(this.props, \"helmetData\"), without(nextProps, \"helmetData\"));\n  }\n  mapNestedChildrenToProps(child, nestedChildren) {\n    if (!nestedChildren) {\n      return null;\n    }\n    switch (child.type) {\n      case \"script\" /* SCRIPT */:\n      case \"noscript\" /* NOSCRIPT */:\n        return {\n          innerHTML: nestedChildren\n        };\n      case \"style\" /* STYLE */:\n        return {\n          cssText: nestedChildren\n        };\n      default:\n        throw new Error(\n          `<${child.type} /> elements are self-closing and can not contain children. Refer to our API for more information.`\n        );\n    }\n  }\n  flattenArrayTypeChildren(child, arrayTypeChildren, newChildProps, nestedChildren) {\n    return {\n      ...arrayTypeChildren,\n      [child.type]: [\n        ...arrayTypeChildren[child.type] || [],\n        {\n          ...newChildProps,\n          ...this.mapNestedChildrenToProps(child, nestedChildren)\n        }\n      ]\n    };\n  }\n  mapObjectTypeChildren(child, newProps, newChildProps, nestedChildren) {\n    switch (child.type) {\n      case \"title\" /* TITLE */:\n        return {\n          ...newProps,\n          [child.type]: nestedChildren,\n          titleAttributes: { ...newChildProps }\n        };\n      case \"body\" /* BODY */:\n        return {\n          ...newProps,\n          bodyAttributes: { ...newChildProps }\n        };\n      case \"html\" /* HTML */:\n        return {\n          ...newProps,\n          htmlAttributes: { ...newChildProps }\n        };\n      default:\n        return {\n          ...newProps,\n          [child.type]: { ...newChildProps }\n        };\n    }\n  }\n  mapArrayTypeChildrenToProps(arrayTypeChildren, newProps) {\n    let newFlattenedProps = { ...newProps };\n    Object.keys(arrayTypeChildren).forEach((arrayChildName) => {\n      newFlattenedProps = {\n        ...newFlattenedProps,\n        [arrayChildName]: arrayTypeChildren[arrayChildName]\n      };\n    });\n    return newFlattenedProps;\n  }\n  warnOnInvalidChildren(child, nestedChildren) {\n    invariant__WEBPACK_IMPORTED_MODULE_2___default()(\n      VALID_TAG_NAMES.some((name) => child.type === name),\n      typeof child.type === \"function\" ? `You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.` : `Only elements types ${VALID_TAG_NAMES.join(\n        \", \"\n      )} are allowed. Helmet does not support rendering <${child.type}> elements. Refer to our API for more information.`\n    );\n    invariant__WEBPACK_IMPORTED_MODULE_2___default()(\n      !nestedChildren || typeof nestedChildren === \"string\" || Array.isArray(nestedChildren) && !nestedChildren.some((nestedChild) => typeof nestedChild !== \"string\"),\n      `Helmet expects a string as a child of <${child.type}>. Did you forget to wrap your children in braces? ( <${child.type}>{\\`\\`}</${child.type}> ) Refer to our API for more information.`\n    );\n    return true;\n  }\n  mapChildrenToProps(children, newProps) {\n    let arrayTypeChildren = {};\n    react__WEBPACK_IMPORTED_MODULE_0___default().Children.forEach(children, (child) => {\n      if (!child || !child.props) {\n        return;\n      }\n      const { children: nestedChildren, ...childProps } = child.props;\n      const newChildProps = Object.keys(childProps).reduce((obj, key) => {\n        obj[HTML_TAG_MAP[key] || key] = childProps[key];\n        return obj;\n      }, {});\n      let { type } = child;\n      if (typeof type === \"symbol\") {\n        type = type.toString();\n      } else {\n        this.warnOnInvalidChildren(child, nestedChildren);\n      }\n      switch (type) {\n        case \"Symbol(react.fragment)\" /* FRAGMENT */:\n          newProps = this.mapChildrenToProps(nestedChildren, newProps);\n          break;\n        case \"link\" /* LINK */:\n        case \"meta\" /* META */:\n        case \"noscript\" /* NOSCRIPT */:\n        case \"script\" /* SCRIPT */:\n        case \"style\" /* STYLE */:\n          arrayTypeChildren = this.flattenArrayTypeChildren(\n            child,\n            arrayTypeChildren,\n            newChildProps,\n            nestedChildren\n          );\n          break;\n        default:\n          newProps = this.mapObjectTypeChildren(child, newProps, newChildProps, nestedChildren);\n          break;\n      }\n    });\n    return this.mapArrayTypeChildrenToProps(arrayTypeChildren, newProps);\n  }\n  render() {\n    const { children, ...props } = this.props;\n    let newProps = { ...props };\n    let { helmetData } = props;\n    if (children) {\n      newProps = this.mapChildrenToProps(children, newProps);\n    }\n    if (helmetData && !(helmetData instanceof HelmetData)) {\n      const data = helmetData;\n      helmetData = new HelmetData(data.context, true);\n      delete newProps.helmetData;\n    }\n    return helmetData ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HelmetDispatcher, { ...newProps, context: helmetData.value }) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Consumer, null, (context) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HelmetDispatcher, { ...newProps, context }));\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaGVsbWV0LWFzeW5jL2xpYi9pbmRleC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUN3RDtBQUNYO0FBQ1g7O0FBRWxDO0FBQzBDOztBQUUxQztBQUMwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaUJBQWlCO0FBQ2xCO0FBQ0EsVUFBVSw0Q0FBNEM7QUFDdEQsWUFBWSwrQkFBK0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsUUFBUTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDRMQUE0TCx5QkFBeUIsS0FBSztBQUMxTjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVMsaURBQWlELHNCQUFzQjtBQUNuRztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxz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L1VzZXJzL3NocmV5YXNndXJhdi9EZXNrdG9wL0dpdEh1Yi9ub2RlX21vZHVsZXMvcmVhY3QtaGVsbWV0LWFzeW5jL2xpYi9pbmRleC5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2luZGV4LnRzeFxuaW1wb3J0IFJlYWN0MywgeyBDb21wb25lbnQgYXMgQ29tcG9uZW50MyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGZhc3RDb21wYXJlIGZyb20gXCJyZWFjdC1mYXN0LWNvbXBhcmVcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuXG4vLyBzcmMvUHJvdmlkZXIudHN4XG5pbXBvcnQgUmVhY3QyLCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvc2VydmVyLnRzXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy9jb25zdGFudHMudHNcbnZhciBUQUdfTkFNRVMgPSAvKiBAX19QVVJFX18gKi8gKChUQUdfTkFNRVMyKSA9PiB7XG4gIFRBR19OQU1FUzJbXCJCQVNFXCJdID0gXCJiYXNlXCI7XG4gIFRBR19OQU1FUzJbXCJCT0RZXCJdID0gXCJib2R5XCI7XG4gIFRBR19OQU1FUzJbXCJIRUFEXCJdID0gXCJoZWFkXCI7XG4gIFRBR19OQU1FUzJbXCJIVE1MXCJdID0gXCJodG1sXCI7XG4gIFRBR19OQU1FUzJbXCJMSU5LXCJdID0gXCJsaW5rXCI7XG4gIFRBR19OQU1FUzJbXCJNRVRBXCJdID0gXCJtZXRhXCI7XG4gIFRBR19OQU1FUzJbXCJOT1NDUklQVFwiXSA9IFwibm9zY3JpcHRcIjtcbiAgVEFHX05BTUVTMltcIlNDUklQVFwiXSA9IFwic2NyaXB0XCI7XG4gIFRBR19OQU1FUzJbXCJTVFlMRVwiXSA9IFwic3R5bGVcIjtcbiAgVEFHX05BTUVTMltcIlRJVExFXCJdID0gXCJ0aXRsZVwiO1xuICBUQUdfTkFNRVMyW1wiRlJBR01FTlRcIl0gPSBcIlN5bWJvbChyZWFjdC5mcmFnbWVudClcIjtcbiAgcmV0dXJuIFRBR19OQU1FUzI7XG59KShUQUdfTkFNRVMgfHwge30pO1xudmFyIFNFT19QUklPUklUWV9UQUdTID0ge1xuICBsaW5rOiB7IHJlbDogW1wiYW1waHRtbFwiLCBcImNhbm9uaWNhbFwiLCBcImFsdGVybmF0ZVwiXSB9LFxuICBzY3JpcHQ6IHsgdHlwZTogW1wiYXBwbGljYXRpb24vbGQranNvblwiXSB9LFxuICBtZXRhOiB7XG4gICAgY2hhcnNldDogXCJcIixcbiAgICBuYW1lOiBbXCJnZW5lcmF0b3JcIiwgXCJyb2JvdHNcIiwgXCJkZXNjcmlwdGlvblwiXSxcbiAgICBwcm9wZXJ0eTogW1xuICAgICAgXCJvZzp0eXBlXCIsXG4gICAgICBcIm9nOnRpdGxlXCIsXG4gICAgICBcIm9nOnVybFwiLFxuICAgICAgXCJvZzppbWFnZVwiLFxuICAgICAgXCJvZzppbWFnZTphbHRcIixcbiAgICAgIFwib2c6ZGVzY3JpcHRpb25cIixcbiAgICAgIFwidHdpdHRlcjp1cmxcIixcbiAgICAgIFwidHdpdHRlcjp0aXRsZVwiLFxuICAgICAgXCJ0d2l0dGVyOmRlc2NyaXB0aW9uXCIsXG4gICAgICBcInR3aXR0ZXI6aW1hZ2VcIixcbiAgICAgIFwidHdpdHRlcjppbWFnZTphbHRcIixcbiAgICAgIFwidHdpdHRlcjpjYXJkXCIsXG4gICAgICBcInR3aXR0ZXI6c2l0ZVwiXG4gICAgXVxuICB9XG59O1xudmFyIFZBTElEX1RBR19OQU1FUyA9IE9iamVjdC52YWx1ZXMoVEFHX05BTUVTKTtcbnZhciBSRUFDVF9UQUdfTUFQID0ge1xuICBhY2Nlc3NrZXk6IFwiYWNjZXNzS2V5XCIsXG4gIGNoYXJzZXQ6IFwiY2hhclNldFwiLFxuICBjbGFzczogXCJjbGFzc05hbWVcIixcbiAgY29udGVudGVkaXRhYmxlOiBcImNvbnRlbnRFZGl0YWJsZVwiLFxuICBjb250ZXh0bWVudTogXCJjb250ZXh0TWVudVwiLFxuICBcImh0dHAtZXF1aXZcIjogXCJodHRwRXF1aXZcIixcbiAgaXRlbXByb3A6IFwiaXRlbVByb3BcIixcbiAgdGFiaW5kZXg6IFwidGFiSW5kZXhcIlxufTtcbnZhciBIVE1MX1RBR19NQVAgPSBPYmplY3QuZW50cmllcyhSRUFDVF9UQUdfTUFQKS5yZWR1Y2UoXG4gIChjYXJyeSwgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgY2FycnlbdmFsdWVdID0ga2V5O1xuICAgIHJldHVybiBjYXJyeTtcbiAgfSxcbiAge31cbik7XG52YXIgSEVMTUVUX0FUVFJJQlVURSA9IFwiZGF0YS1yaFwiO1xuXG4vLyBzcmMvdXRpbHMudHNcbnZhciBIRUxNRVRfUFJPUFMgPSB7XG4gIERFRkFVTFRfVElUTEU6IFwiZGVmYXVsdFRpdGxlXCIsXG4gIERFRkVSOiBcImRlZmVyXCIsXG4gIEVOQ09ERV9TUEVDSUFMX0NIQVJBQ1RFUlM6IFwiZW5jb2RlU3BlY2lhbENoYXJhY3RlcnNcIixcbiAgT05fQ0hBTkdFX0NMSUVOVF9TVEFURTogXCJvbkNoYW5nZUNsaWVudFN0YXRlXCIsXG4gIFRJVExFX1RFTVBMQVRFOiBcInRpdGxlVGVtcGxhdGVcIixcbiAgUFJJT1JJVElaRV9TRU9fVEFHUzogXCJwcmlvcml0aXplU2VvVGFnc1wiXG59O1xudmFyIGdldElubmVybW9zdFByb3BlcnR5ID0gKHByb3BzTGlzdCwgcHJvcGVydHkpID0+IHtcbiAgZm9yIChsZXQgaSA9IHByb3BzTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgIGNvbnN0IHByb3BzID0gcHJvcHNMaXN0W2ldO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIHByb3BlcnR5KSkge1xuICAgICAgcmV0dXJuIHByb3BzW3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xudmFyIGdldFRpdGxlRnJvbVByb3BzTGlzdCA9IChwcm9wc0xpc3QpID0+IHtcbiAgbGV0IGlubmVybW9zdFRpdGxlID0gZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBcInRpdGxlXCIgLyogVElUTEUgKi8pO1xuICBjb25zdCBpbm5lcm1vc3RUZW1wbGF0ZSA9IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLlRJVExFX1RFTVBMQVRFKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5uZXJtb3N0VGl0bGUpKSB7XG4gICAgaW5uZXJtb3N0VGl0bGUgPSBpbm5lcm1vc3RUaXRsZS5qb2luKFwiXCIpO1xuICB9XG4gIGlmIChpbm5lcm1vc3RUZW1wbGF0ZSAmJiBpbm5lcm1vc3RUaXRsZSkge1xuICAgIHJldHVybiBpbm5lcm1vc3RUZW1wbGF0ZS5yZXBsYWNlKC8lcy9nLCAoKSA9PiBpbm5lcm1vc3RUaXRsZSk7XG4gIH1cbiAgY29uc3QgaW5uZXJtb3N0RGVmYXVsdFRpdGxlID0gZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuREVGQVVMVF9USVRMRSk7XG4gIHJldHVybiBpbm5lcm1vc3RUaXRsZSB8fCBpbm5lcm1vc3REZWZhdWx0VGl0bGUgfHwgdm9pZCAwO1xufTtcbnZhciBnZXRPbkNoYW5nZUNsaWVudFN0YXRlID0gKHByb3BzTGlzdCkgPT4gZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuT05fQ0hBTkdFX0NMSUVOVF9TVEFURSkgfHwgKCgpID0+IHtcbn0pO1xudmFyIGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0ID0gKHRhZ1R5cGUsIHByb3BzTGlzdCkgPT4gcHJvcHNMaXN0LmZpbHRlcigocHJvcHMpID0+IHR5cGVvZiBwcm9wc1t0YWdUeXBlXSAhPT0gXCJ1bmRlZmluZWRcIikubWFwKChwcm9wcykgPT4gcHJvcHNbdGFnVHlwZV0pLnJlZHVjZSgodGFnQXR0cnMsIGN1cnJlbnQpID0+ICh7IC4uLnRhZ0F0dHJzLCAuLi5jdXJyZW50IH0pLCB7fSk7XG52YXIgZ2V0QmFzZVRhZ0Zyb21Qcm9wc0xpc3QgPSAocHJpbWFyeUF0dHJpYnV0ZXMsIHByb3BzTGlzdCkgPT4gcHJvcHNMaXN0LmZpbHRlcigocHJvcHMpID0+IHR5cGVvZiBwcm9wc1tcImJhc2VcIiAvKiBCQVNFICovXSAhPT0gXCJ1bmRlZmluZWRcIikubWFwKChwcm9wcykgPT4gcHJvcHNbXCJiYXNlXCIgLyogQkFTRSAqL10pLnJldmVyc2UoKS5yZWR1Y2UoKGlubmVybW9zdEJhc2VUYWcsIHRhZykgPT4ge1xuICBpZiAoIWlubmVybW9zdEJhc2VUYWcubGVuZ3RoKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRhZyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGVLZXkgPSBrZXlzW2ldO1xuICAgICAgY29uc3QgbG93ZXJDYXNlQXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAocHJpbWFyeUF0dHJpYnV0ZXMuaW5kZXhPZihsb3dlckNhc2VBdHRyaWJ1dGVLZXkpICE9PSAtMSAmJiB0YWdbbG93ZXJDYXNlQXR0cmlidXRlS2V5XSkge1xuICAgICAgICByZXR1cm4gaW5uZXJtb3N0QmFzZVRhZy5jb25jYXQodGFnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlubmVybW9zdEJhc2VUYWc7XG59LCBbXSk7XG52YXIgd2FybiA9IChtc2cpID0+IGNvbnNvbGUgJiYgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiICYmIGNvbnNvbGUud2Fybihtc2cpO1xudmFyIGdldFRhZ3NGcm9tUHJvcHNMaXN0ID0gKHRhZ05hbWUsIHByaW1hcnlBdHRyaWJ1dGVzLCBwcm9wc0xpc3QpID0+IHtcbiAgY29uc3QgYXBwcm92ZWRTZWVuVGFncyA9IHt9O1xuICByZXR1cm4gcHJvcHNMaXN0LmZpbHRlcigocHJvcHMpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wc1t0YWdOYW1lXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzW3RhZ05hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgSGVsbWV0OiAke3RhZ05hbWV9IHNob3VsZCBiZSBvZiB0eXBlIFwiQXJyYXlcIi4gSW5zdGVhZCBmb3VuZCB0eXBlIFwiJHt0eXBlb2YgcHJvcHNbdGFnTmFtZV19XCJgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pLm1hcCgocHJvcHMpID0+IHByb3BzW3RhZ05hbWVdKS5yZXZlcnNlKCkucmVkdWNlKChhcHByb3ZlZFRhZ3MsIGluc3RhbmNlVGFncykgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlU2VlblRhZ3MgPSB7fTtcbiAgICBpbnN0YW5jZVRhZ3MuZmlsdGVyKCh0YWcpID0+IHtcbiAgICAgIGxldCBwcmltYXJ5QXR0cmlidXRlS2V5O1xuICAgICAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyh0YWcpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzMi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVLZXkgPSBrZXlzMltpXTtcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlQXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChwcmltYXJ5QXR0cmlidXRlcy5pbmRleE9mKGxvd2VyQ2FzZUF0dHJpYnV0ZUtleSkgIT09IC0xICYmICEocHJpbWFyeUF0dHJpYnV0ZUtleSA9PT0gXCJyZWxcIiAvKiBSRUwgKi8gJiYgdGFnW3ByaW1hcnlBdHRyaWJ1dGVLZXldLnRvTG93ZXJDYXNlKCkgPT09IFwiY2Fub25pY2FsXCIpICYmICEobG93ZXJDYXNlQXR0cmlidXRlS2V5ID09PSBcInJlbFwiIC8qIFJFTCAqLyAmJiB0YWdbbG93ZXJDYXNlQXR0cmlidXRlS2V5XS50b0xvd2VyQ2FzZSgpID09PSBcInN0eWxlc2hlZXRcIikpIHtcbiAgICAgICAgICBwcmltYXJ5QXR0cmlidXRlS2V5ID0gbG93ZXJDYXNlQXR0cmlidXRlS2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmltYXJ5QXR0cmlidXRlcy5pbmRleE9mKGF0dHJpYnV0ZUtleSkgIT09IC0xICYmIChhdHRyaWJ1dGVLZXkgPT09IFwiaW5uZXJIVE1MXCIgLyogSU5ORVJfSFRNTCAqLyB8fCBhdHRyaWJ1dGVLZXkgPT09IFwiY3NzVGV4dFwiIC8qIENTU19URVhUICovIHx8IGF0dHJpYnV0ZUtleSA9PT0gXCJpdGVtcHJvcFwiIC8qIElURU1fUFJPUCAqLykpIHtcbiAgICAgICAgICBwcmltYXJ5QXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXByaW1hcnlBdHRyaWJ1dGVLZXkgfHwgIXRhZ1twcmltYXJ5QXR0cmlidXRlS2V5XSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHRhZ1twcmltYXJ5QXR0cmlidXRlS2V5XS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKCFhcHByb3ZlZFNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldKSB7XG4gICAgICAgIGFwcHJvdmVkU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV0gPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmICghaW5zdGFuY2VTZWVuVGFnc1twcmltYXJ5QXR0cmlidXRlS2V5XSkge1xuICAgICAgICBpbnN0YW5jZVNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldID0ge307XG4gICAgICB9XG4gICAgICBpZiAoIWFwcHJvdmVkU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV1bdmFsdWVdKSB7XG4gICAgICAgIGluc3RhbmNlU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV1bdmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkucmV2ZXJzZSgpLmZvckVhY2goKHRhZykgPT4gYXBwcm92ZWRUYWdzLnB1c2godGFnKSk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGluc3RhbmNlU2VlblRhZ3MpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgYXR0cmlidXRlS2V5ID0ga2V5c1tpXTtcbiAgICAgIGNvbnN0IHRhZ1VuaW9uID0ge1xuICAgICAgICAuLi5hcHByb3ZlZFNlZW5UYWdzW2F0dHJpYnV0ZUtleV0sXG4gICAgICAgIC4uLmluc3RhbmNlU2VlblRhZ3NbYXR0cmlidXRlS2V5XVxuICAgICAgfTtcbiAgICAgIGFwcHJvdmVkU2VlblRhZ3NbYXR0cmlidXRlS2V5XSA9IHRhZ1VuaW9uO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZWRUYWdzO1xuICB9LCBbXSkucmV2ZXJzZSgpO1xufTtcbnZhciBnZXRBbnlUcnVlRnJvbVByb3BzTGlzdCA9IChwcm9wc0xpc3QsIGNoZWNrZWRUYWcpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHNMaXN0KSAmJiBwcm9wc0xpc3QubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHByb3BzTGlzdC5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgIGNvbnN0IHByb3AgPSBwcm9wc0xpc3RbaW5kZXhdO1xuICAgICAgaWYgKHByb3BbY2hlY2tlZFRhZ10pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgcmVkdWNlUHJvcHNUb1N0YXRlID0gKHByb3BzTGlzdCkgPT4gKHtcbiAgYmFzZVRhZzogZ2V0QmFzZVRhZ0Zyb21Qcm9wc0xpc3QoW1wiaHJlZlwiIC8qIEhSRUYgKi9dLCBwcm9wc0xpc3QpLFxuICBib2R5QXR0cmlidXRlczogZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QoXCJib2R5QXR0cmlidXRlc1wiIC8qIEJPRFkgKi8sIHByb3BzTGlzdCksXG4gIGRlZmVyOiBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIEhFTE1FVF9QUk9QUy5ERUZFUiksXG4gIGVuY29kZTogZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuRU5DT0RFX1NQRUNJQUxfQ0hBUkFDVEVSUyksXG4gIGh0bWxBdHRyaWJ1dGVzOiBnZXRBdHRyaWJ1dGVzRnJvbVByb3BzTGlzdChcImh0bWxBdHRyaWJ1dGVzXCIgLyogSFRNTCAqLywgcHJvcHNMaXN0KSxcbiAgbGlua1RhZ3M6IGdldFRhZ3NGcm9tUHJvcHNMaXN0KFxuICAgIFwibGlua1wiIC8qIExJTksgKi8sXG4gICAgW1wicmVsXCIgLyogUkVMICovLCBcImhyZWZcIiAvKiBIUkVGICovXSxcbiAgICBwcm9wc0xpc3RcbiAgKSxcbiAgbWV0YVRhZ3M6IGdldFRhZ3NGcm9tUHJvcHNMaXN0KFxuICAgIFwibWV0YVwiIC8qIE1FVEEgKi8sXG4gICAgW1xuICAgICAgXCJuYW1lXCIgLyogTkFNRSAqLyxcbiAgICAgIFwiY2hhcnNldFwiIC8qIENIQVJTRVQgKi8sXG4gICAgICBcImh0dHAtZXF1aXZcIiAvKiBIVFRQRVFVSVYgKi8sXG4gICAgICBcInByb3BlcnR5XCIgLyogUFJPUEVSVFkgKi8sXG4gICAgICBcIml0ZW1wcm9wXCIgLyogSVRFTV9QUk9QICovXG4gICAgXSxcbiAgICBwcm9wc0xpc3RcbiAgKSxcbiAgbm9zY3JpcHRUYWdzOiBnZXRUYWdzRnJvbVByb3BzTGlzdChcIm5vc2NyaXB0XCIgLyogTk9TQ1JJUFQgKi8sIFtcImlubmVySFRNTFwiIC8qIElOTkVSX0hUTUwgKi9dLCBwcm9wc0xpc3QpLFxuICBvbkNoYW5nZUNsaWVudFN0YXRlOiBnZXRPbkNoYW5nZUNsaWVudFN0YXRlKHByb3BzTGlzdCksXG4gIHNjcmlwdFRhZ3M6IGdldFRhZ3NGcm9tUHJvcHNMaXN0KFxuICAgIFwic2NyaXB0XCIgLyogU0NSSVBUICovLFxuICAgIFtcInNyY1wiIC8qIFNSQyAqLywgXCJpbm5lckhUTUxcIiAvKiBJTk5FUl9IVE1MICovXSxcbiAgICBwcm9wc0xpc3RcbiAgKSxcbiAgc3R5bGVUYWdzOiBnZXRUYWdzRnJvbVByb3BzTGlzdChcInN0eWxlXCIgLyogU1RZTEUgKi8sIFtcImNzc1RleHRcIiAvKiBDU1NfVEVYVCAqL10sIHByb3BzTGlzdCksXG4gIHRpdGxlOiBnZXRUaXRsZUZyb21Qcm9wc0xpc3QocHJvcHNMaXN0KSxcbiAgdGl0bGVBdHRyaWJ1dGVzOiBnZXRBdHRyaWJ1dGVzRnJvbVByb3BzTGlzdChcInRpdGxlQXR0cmlidXRlc1wiIC8qIFRJVExFICovLCBwcm9wc0xpc3QpLFxuICBwcmlvcml0aXplU2VvVGFnczogZ2V0QW55VHJ1ZUZyb21Qcm9wc0xpc3QocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuUFJJT1JJVElaRV9TRU9fVEFHUylcbn0pO1xudmFyIGZsYXR0ZW5BcnJheSA9IChwb3NzaWJsZUFycmF5KSA9PiBBcnJheS5pc0FycmF5KHBvc3NpYmxlQXJyYXkpID8gcG9zc2libGVBcnJheS5qb2luKFwiXCIpIDogcG9zc2libGVBcnJheTtcbnZhciBjaGVja0lmUHJvcHNNYXRjaCA9IChwcm9wcywgdG9NYXRjaCkgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodG9NYXRjaFtrZXlzW2ldXSAmJiB0b01hdGNoW2tleXNbaV1dLmluY2x1ZGVzKHByb3BzW2tleXNbaV1dKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgcHJpb3JpdGl6ZXIgPSAoZWxlbWVudHNMaXN0LCBwcm9wc1RvTWF0Y2gpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudHNMaXN0KSkge1xuICAgIHJldHVybiBlbGVtZW50c0xpc3QucmVkdWNlKFxuICAgICAgKGFjYywgZWxlbWVudEF0dHJzKSA9PiB7XG4gICAgICAgIGlmIChjaGVja0lmUHJvcHNNYXRjaChlbGVtZW50QXR0cnMsIHByb3BzVG9NYXRjaCkpIHtcbiAgICAgICAgICBhY2MucHJpb3JpdHkucHVzaChlbGVtZW50QXR0cnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjYy5kZWZhdWx0LnB1c2goZWxlbWVudEF0dHJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSxcbiAgICAgIHsgcHJpb3JpdHk6IFtdLCBkZWZhdWx0OiBbXSB9XG4gICAgKTtcbiAgfVxuICByZXR1cm4geyBkZWZhdWx0OiBlbGVtZW50c0xpc3QsIHByaW9yaXR5OiBbXSB9O1xufTtcbnZhciB3aXRob3V0ID0gKG9iaiwga2V5KSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4ub2JqLFxuICAgIFtrZXldOiB2b2lkIDBcbiAgfTtcbn07XG5cbi8vIHNyYy9zZXJ2ZXIudHNcbnZhciBTRUxGX0NMT1NJTkdfVEFHUyA9IFtcIm5vc2NyaXB0XCIgLyogTk9TQ1JJUFQgKi8sIFwic2NyaXB0XCIgLyogU0NSSVBUICovLCBcInN0eWxlXCIgLyogU1RZTEUgKi9dO1xudmFyIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzID0gKHN0ciwgZW5jb2RlID0gdHJ1ZSkgPT4ge1xuICBpZiAoZW5jb2RlID09PSBmYWxzZSkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKTtcbiAgfVxuICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvJi9nLCBcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpLnJlcGxhY2UoLycvZywgXCImI3gyNztcIik7XG59O1xudmFyIGdlbmVyYXRlRWxlbWVudEF0dHJpYnV0ZXNBc1N0cmluZyA9IChhdHRyaWJ1dGVzKSA9PiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoKHN0ciwga2V5KSA9PiB7XG4gIGNvbnN0IGF0dHIgPSB0eXBlb2YgYXR0cmlidXRlc1trZXldICE9PSBcInVuZGVmaW5lZFwiID8gYCR7a2V5fT1cIiR7YXR0cmlidXRlc1trZXldfVwiYCA6IGAke2tleX1gO1xuICByZXR1cm4gc3RyID8gYCR7c3RyfSAke2F0dHJ9YCA6IGF0dHI7XG59LCBcIlwiKTtcbnZhciBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcgPSAodHlwZSwgdGl0bGUsIGF0dHJpYnV0ZXMsIGVuY29kZSkgPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVTdHJpbmcgPSBnZW5lcmF0ZUVsZW1lbnRBdHRyaWJ1dGVzQXNTdHJpbmcoYXR0cmlidXRlcyk7XG4gIGNvbnN0IGZsYXR0ZW5lZFRpdGxlID0gZmxhdHRlbkFycmF5KHRpdGxlKTtcbiAgcmV0dXJuIGF0dHJpYnV0ZVN0cmluZyA/IGA8JHt0eXBlfSAke0hFTE1FVF9BVFRSSUJVVEV9PVwidHJ1ZVwiICR7YXR0cmlidXRlU3RyaW5nfT4ke2VuY29kZVNwZWNpYWxDaGFyYWN0ZXJzKFxuICAgIGZsYXR0ZW5lZFRpdGxlLFxuICAgIGVuY29kZVxuICApfTwvJHt0eXBlfT5gIDogYDwke3R5cGV9ICR7SEVMTUVUX0FUVFJJQlVURX09XCJ0cnVlXCI+JHtlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyhcbiAgICBmbGF0dGVuZWRUaXRsZSxcbiAgICBlbmNvZGVcbiAgKX08LyR7dHlwZX0+YDtcbn07XG52YXIgZ2VuZXJhdGVUYWdzQXNTdHJpbmcgPSAodHlwZSwgdGFncywgZW5jb2RlID0gdHJ1ZSkgPT4gdGFncy5yZWR1Y2UoKHN0ciwgdCkgPT4ge1xuICBjb25zdCB0YWcgPSB0O1xuICBjb25zdCBhdHRyaWJ1dGVIdG1sID0gT2JqZWN0LmtleXModGFnKS5maWx0ZXIoXG4gICAgKGF0dHJpYnV0ZSkgPT4gIShhdHRyaWJ1dGUgPT09IFwiaW5uZXJIVE1MXCIgLyogSU5ORVJfSFRNTCAqLyB8fCBhdHRyaWJ1dGUgPT09IFwiY3NzVGV4dFwiIC8qIENTU19URVhUICovKVxuICApLnJlZHVjZSgoc3RyaW5nLCBhdHRyaWJ1dGUpID0+IHtcbiAgICBjb25zdCBhdHRyID0gdHlwZW9mIHRhZ1thdHRyaWJ1dGVdID09PSBcInVuZGVmaW5lZFwiID8gYXR0cmlidXRlIDogYCR7YXR0cmlidXRlfT1cIiR7ZW5jb2RlU3BlY2lhbENoYXJhY3RlcnModGFnW2F0dHJpYnV0ZV0sIGVuY29kZSl9XCJgO1xuICAgIHJldHVybiBzdHJpbmcgPyBgJHtzdHJpbmd9ICR7YXR0cn1gIDogYXR0cjtcbiAgfSwgXCJcIik7XG4gIGNvbnN0IHRhZ0NvbnRlbnQgPSB0YWcuaW5uZXJIVE1MIHx8IHRhZy5jc3NUZXh0IHx8IFwiXCI7XG4gIGNvbnN0IGlzU2VsZkNsb3NpbmcgPSBTRUxGX0NMT1NJTkdfVEFHUy5pbmRleE9mKHR5cGUpID09PSAtMTtcbiAgcmV0dXJuIGAke3N0cn08JHt0eXBlfSAke0hFTE1FVF9BVFRSSUJVVEV9PVwidHJ1ZVwiICR7YXR0cmlidXRlSHRtbH0ke2lzU2VsZkNsb3NpbmcgPyBgLz5gIDogYD4ke3RhZ0NvbnRlbnR9PC8ke3R5cGV9PmB9YDtcbn0sIFwiXCIpO1xudmFyIGNvbnZlcnRFbGVtZW50QXR0cmlidXRlc1RvUmVhY3RQcm9wcyA9IChhdHRyaWJ1dGVzLCBpbml0UHJvcHMgPSB7fSkgPT4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBjb25zdCBtYXBwZWQgPSBSRUFDVF9UQUdfTUFQW2tleV07XG4gIG9ialttYXBwZWQgfHwga2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0sIGluaXRQcm9wcyk7XG52YXIgZ2VuZXJhdGVUaXRsZUFzUmVhY3RDb21wb25lbnQgPSAoX3R5cGUsIHRpdGxlLCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGNvbnN0IGluaXRQcm9wcyA9IHtcbiAgICBrZXk6IHRpdGxlLFxuICAgIFtIRUxNRVRfQVRUUklCVVRFXTogdHJ1ZVxuICB9O1xuICBjb25zdCBwcm9wcyA9IGNvbnZlcnRFbGVtZW50QXR0cmlidXRlc1RvUmVhY3RQcm9wcyhhdHRyaWJ1dGVzLCBpbml0UHJvcHMpO1xuICByZXR1cm4gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiIC8qIFRJVExFICovLCBwcm9wcywgdGl0bGUpXTtcbn07XG52YXIgZ2VuZXJhdGVUYWdzQXNSZWFjdENvbXBvbmVudCA9ICh0eXBlLCB0YWdzKSA9PiB0YWdzLm1hcCgodGFnLCBpKSA9PiB7XG4gIGNvbnN0IG1hcHBlZFRhZyA9IHtcbiAgICBrZXk6IGksXG4gICAgW0hFTE1FVF9BVFRSSUJVVEVdOiB0cnVlXG4gIH07XG4gIE9iamVjdC5rZXlzKHRhZykuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG4gICAgY29uc3QgbWFwcGVkID0gUkVBQ1RfVEFHX01BUFthdHRyaWJ1dGVdO1xuICAgIGNvbnN0IG1hcHBlZEF0dHJpYnV0ZSA9IG1hcHBlZCB8fCBhdHRyaWJ1dGU7XG4gICAgaWYgKG1hcHBlZEF0dHJpYnV0ZSA9PT0gXCJpbm5lckhUTUxcIiAvKiBJTk5FUl9IVE1MICovIHx8IG1hcHBlZEF0dHJpYnV0ZSA9PT0gXCJjc3NUZXh0XCIgLyogQ1NTX1RFWFQgKi8pIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0YWcuaW5uZXJIVE1MIHx8IHRhZy5jc3NUZXh0O1xuICAgICAgbWFwcGVkVGFnLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0geyBfX2h0bWw6IGNvbnRlbnQgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFwcGVkVGFnW21hcHBlZEF0dHJpYnV0ZV0gPSB0YWdbYXR0cmlidXRlXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0eXBlLCBtYXBwZWRUYWcpO1xufSk7XG52YXIgZ2V0TWV0aG9kc0ZvclRhZyA9ICh0eXBlLCB0YWdzLCBlbmNvZGUgPSB0cnVlKSA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJ0aXRsZVwiIC8qIFRJVExFICovOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9Db21wb25lbnQ6ICgpID0+IGdlbmVyYXRlVGl0bGVBc1JlYWN0Q29tcG9uZW50KHR5cGUsIHRhZ3MudGl0bGUsIHRhZ3MudGl0bGVBdHRyaWJ1dGVzKSxcbiAgICAgICAgdG9TdHJpbmc6ICgpID0+IGdlbmVyYXRlVGl0bGVBc1N0cmluZyh0eXBlLCB0YWdzLnRpdGxlLCB0YWdzLnRpdGxlQXR0cmlidXRlcywgZW5jb2RlKVxuICAgICAgfTtcbiAgICBjYXNlIFwiYm9keUF0dHJpYnV0ZXNcIiAvKiBCT0RZICovOlxuICAgIGNhc2UgXCJodG1sQXR0cmlidXRlc1wiIC8qIEhUTUwgKi86XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b0NvbXBvbmVudDogKCkgPT4gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzVG9SZWFjdFByb3BzKHRhZ3MpLFxuICAgICAgICB0b1N0cmluZzogKCkgPT4gZ2VuZXJhdGVFbGVtZW50QXR0cmlidXRlc0FzU3RyaW5nKHRhZ3MpXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b0NvbXBvbmVudDogKCkgPT4gZ2VuZXJhdGVUYWdzQXNSZWFjdENvbXBvbmVudCh0eXBlLCB0YWdzKSxcbiAgICAgICAgdG9TdHJpbmc6ICgpID0+IGdlbmVyYXRlVGFnc0FzU3RyaW5nKHR5cGUsIHRhZ3MsIGVuY29kZSlcbiAgICAgIH07XG4gIH1cbn07XG52YXIgZ2V0UHJpb3JpdHlNZXRob2RzID0gKHsgbWV0YVRhZ3MsIGxpbmtUYWdzLCBzY3JpcHRUYWdzLCBlbmNvZGUgfSkgPT4ge1xuICBjb25zdCBtZXRhID0gcHJpb3JpdGl6ZXIobWV0YVRhZ3MsIFNFT19QUklPUklUWV9UQUdTLm1ldGEpO1xuICBjb25zdCBsaW5rID0gcHJpb3JpdGl6ZXIobGlua1RhZ3MsIFNFT19QUklPUklUWV9UQUdTLmxpbmspO1xuICBjb25zdCBzY3JpcHQgPSBwcmlvcml0aXplcihzY3JpcHRUYWdzLCBTRU9fUFJJT1JJVFlfVEFHUy5zY3JpcHQpO1xuICBjb25zdCBwcmlvcml0eU1ldGhvZHMgPSB7XG4gICAgdG9Db21wb25lbnQ6ICgpID0+IFtcbiAgICAgIC4uLmdlbmVyYXRlVGFnc0FzUmVhY3RDb21wb25lbnQoXCJtZXRhXCIgLyogTUVUQSAqLywgbWV0YS5wcmlvcml0eSksXG4gICAgICAuLi5nZW5lcmF0ZVRhZ3NBc1JlYWN0Q29tcG9uZW50KFwibGlua1wiIC8qIExJTksgKi8sIGxpbmsucHJpb3JpdHkpLFxuICAgICAgLi4uZ2VuZXJhdGVUYWdzQXNSZWFjdENvbXBvbmVudChcInNjcmlwdFwiIC8qIFNDUklQVCAqLywgc2NyaXB0LnByaW9yaXR5KVxuICAgIF0sXG4gICAgdG9TdHJpbmc6ICgpID0+IChcbiAgICAgIC8vIGdlbmVyYXRlIGFsbCB0aGUgdGFncyBhcyBzdHJpbmdzIGFuZCBjb25jYXRlbmF0ZSB0aGVtXG4gICAgICBgJHtnZXRNZXRob2RzRm9yVGFnKFwibWV0YVwiIC8qIE1FVEEgKi8sIG1ldGEucHJpb3JpdHksIGVuY29kZSl9ICR7Z2V0TWV0aG9kc0ZvclRhZyhcbiAgICAgICAgXCJsaW5rXCIgLyogTElOSyAqLyxcbiAgICAgICAgbGluay5wcmlvcml0eSxcbiAgICAgICAgZW5jb2RlXG4gICAgICApfSAke2dldE1ldGhvZHNGb3JUYWcoXCJzY3JpcHRcIiAvKiBTQ1JJUFQgKi8sIHNjcmlwdC5wcmlvcml0eSwgZW5jb2RlKX1gXG4gICAgKVxuICB9O1xuICByZXR1cm4ge1xuICAgIHByaW9yaXR5TWV0aG9kcyxcbiAgICBtZXRhVGFnczogbWV0YS5kZWZhdWx0LFxuICAgIGxpbmtUYWdzOiBsaW5rLmRlZmF1bHQsXG4gICAgc2NyaXB0VGFnczogc2NyaXB0LmRlZmF1bHRcbiAgfTtcbn07XG52YXIgbWFwU3RhdGVPblNlcnZlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgYmFzZVRhZyxcbiAgICBib2R5QXR0cmlidXRlcyxcbiAgICBlbmNvZGUgPSB0cnVlLFxuICAgIGh0bWxBdHRyaWJ1dGVzLFxuICAgIG5vc2NyaXB0VGFncyxcbiAgICBzdHlsZVRhZ3MsXG4gICAgdGl0bGUgPSBcIlwiLFxuICAgIHRpdGxlQXR0cmlidXRlcyxcbiAgICBwcmlvcml0aXplU2VvVGFnc1xuICB9ID0gcHJvcHM7XG4gIGxldCB7IGxpbmtUYWdzLCBtZXRhVGFncywgc2NyaXB0VGFncyB9ID0gcHJvcHM7XG4gIGxldCBwcmlvcml0eU1ldGhvZHMgPSB7XG4gICAgdG9Db21wb25lbnQ6ICgpID0+IHtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiAoKSA9PiBcIlwiXG4gIH07XG4gIGlmIChwcmlvcml0aXplU2VvVGFncykge1xuICAgICh7IHByaW9yaXR5TWV0aG9kcywgbGlua1RhZ3MsIG1ldGFUYWdzLCBzY3JpcHRUYWdzIH0gPSBnZXRQcmlvcml0eU1ldGhvZHMocHJvcHMpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByaW9yaXR5OiBwcmlvcml0eU1ldGhvZHMsXG4gICAgYmFzZTogZ2V0TWV0aG9kc0ZvclRhZyhcImJhc2VcIiAvKiBCQVNFICovLCBiYXNlVGFnLCBlbmNvZGUpLFxuICAgIGJvZHlBdHRyaWJ1dGVzOiBnZXRNZXRob2RzRm9yVGFnKFwiYm9keUF0dHJpYnV0ZXNcIiAvKiBCT0RZICovLCBib2R5QXR0cmlidXRlcywgZW5jb2RlKSxcbiAgICBodG1sQXR0cmlidXRlczogZ2V0TWV0aG9kc0ZvclRhZyhcImh0bWxBdHRyaWJ1dGVzXCIgLyogSFRNTCAqLywgaHRtbEF0dHJpYnV0ZXMsIGVuY29kZSksXG4gICAgbGluazogZ2V0TWV0aG9kc0ZvclRhZyhcImxpbmtcIiAvKiBMSU5LICovLCBsaW5rVGFncywgZW5jb2RlKSxcbiAgICBtZXRhOiBnZXRNZXRob2RzRm9yVGFnKFwibWV0YVwiIC8qIE1FVEEgKi8sIG1ldGFUYWdzLCBlbmNvZGUpLFxuICAgIG5vc2NyaXB0OiBnZXRNZXRob2RzRm9yVGFnKFwibm9zY3JpcHRcIiAvKiBOT1NDUklQVCAqLywgbm9zY3JpcHRUYWdzLCBlbmNvZGUpLFxuICAgIHNjcmlwdDogZ2V0TWV0aG9kc0ZvclRhZyhcInNjcmlwdFwiIC8qIFNDUklQVCAqLywgc2NyaXB0VGFncywgZW5jb2RlKSxcbiAgICBzdHlsZTogZ2V0TWV0aG9kc0ZvclRhZyhcInN0eWxlXCIgLyogU1RZTEUgKi8sIHN0eWxlVGFncywgZW5jb2RlKSxcbiAgICB0aXRsZTogZ2V0TWV0aG9kc0ZvclRhZyhcInRpdGxlXCIgLyogVElUTEUgKi8sIHsgdGl0bGUsIHRpdGxlQXR0cmlidXRlcyB9LCBlbmNvZGUpXG4gIH07XG59O1xudmFyIHNlcnZlcl9kZWZhdWx0ID0gbWFwU3RhdGVPblNlcnZlcjtcblxuLy8gc3JjL0hlbG1ldERhdGEudHNcbnZhciBpbnN0YW5jZXMgPSBbXTtcbnZhciBpc0RvY3VtZW50ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xudmFyIEhlbG1ldERhdGEgPSBjbGFzcyB7XG4gIGluc3RhbmNlcyA9IFtdO1xuICBjYW5Vc2VET00gPSBpc0RvY3VtZW50O1xuICBjb250ZXh0O1xuICB2YWx1ZSA9IHtcbiAgICBzZXRIZWxtZXQ6IChzZXJ2ZXJTdGF0ZSkgPT4ge1xuICAgICAgdGhpcy5jb250ZXh0LmhlbG1ldCA9IHNlcnZlclN0YXRlO1xuICAgIH0sXG4gICAgaGVsbWV0SW5zdGFuY2VzOiB7XG4gICAgICBnZXQ6ICgpID0+IHRoaXMuY2FuVXNlRE9NID8gaW5zdGFuY2VzIDogdGhpcy5pbnN0YW5jZXMsXG4gICAgICBhZGQ6IChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAodGhpcy5jYW5Vc2VET00gPyBpbnN0YW5jZXMgOiB0aGlzLmluc3RhbmNlcykucHVzaChpbnN0YW5jZSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiAoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAodGhpcy5jYW5Vc2VET00gPyBpbnN0YW5jZXMgOiB0aGlzLmluc3RhbmNlcykuaW5kZXhPZihpbnN0YW5jZSk7XG4gICAgICAgICh0aGlzLmNhblVzZURPTSA/IGluc3RhbmNlcyA6IHRoaXMuaW5zdGFuY2VzKS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3RydWN0b3IoY29udGV4dCwgY2FuVXNlRE9NKSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLmNhblVzZURPTSA9IGNhblVzZURPTSB8fCBmYWxzZTtcbiAgICBpZiAoIWNhblVzZURPTSkge1xuICAgICAgY29udGV4dC5oZWxtZXQgPSBzZXJ2ZXJfZGVmYXVsdCh7XG4gICAgICAgIGJhc2VUYWc6IFtdLFxuICAgICAgICBib2R5QXR0cmlidXRlczoge30sXG4gICAgICAgIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlLFxuICAgICAgICBodG1sQXR0cmlidXRlczoge30sXG4gICAgICAgIGxpbmtUYWdzOiBbXSxcbiAgICAgICAgbWV0YVRhZ3M6IFtdLFxuICAgICAgICBub3NjcmlwdFRhZ3M6IFtdLFxuICAgICAgICBzY3JpcHRUYWdzOiBbXSxcbiAgICAgICAgc3R5bGVUYWdzOiBbXSxcbiAgICAgICAgdGl0bGU6IFwiXCIsXG4gICAgICAgIHRpdGxlQXR0cmlidXRlczoge31cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL1Byb3ZpZGVyLnRzeFxudmFyIGRlZmF1bHRWYWx1ZSA9IHt9O1xudmFyIENvbnRleHQgPSBSZWFjdDIuY3JlYXRlQ29udGV4dChkZWZhdWx0VmFsdWUpO1xudmFyIEhlbG1ldFByb3ZpZGVyID0gY2xhc3MgX0hlbG1ldFByb3ZpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIGNhblVzZURPTSA9IGlzRG9jdW1lbnQ7XG4gIGhlbG1ldERhdGE7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuaGVsbWV0RGF0YSA9IG5ldyBIZWxtZXREYXRhKHRoaXMucHJvcHMuY29udGV4dCB8fCB7fSwgX0hlbG1ldFByb3ZpZGVyLmNhblVzZURPTSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QyLmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdGhpcy5oZWxtZXREYXRhLnZhbHVlIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG59O1xuXG4vLyBzcmMvRGlzcGF0Y2hlci50c3hcbmltcG9ydCB7IENvbXBvbmVudCBhcyBDb21wb25lbnQyIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gXCJzaGFsbG93ZXF1YWxcIjtcblxuLy8gc3JjL2NsaWVudC50c1xudmFyIHVwZGF0ZVRhZ3MgPSAodHlwZSwgdGFncykgPT4ge1xuICBjb25zdCBoZWFkRWxlbWVudCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRcIiAvKiBIRUFEICovKTtcbiAgY29uc3QgdGFnTm9kZXMgPSBoZWFkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke3R5cGV9WyR7SEVMTUVUX0FUVFJJQlVURX1dYCk7XG4gIGNvbnN0IG9sZFRhZ3MgPSBbXS5zbGljZS5jYWxsKHRhZ05vZGVzKTtcbiAgY29uc3QgbmV3VGFncyA9IFtdO1xuICBsZXQgaW5kZXhUb0RlbGV0ZTtcbiAgaWYgKHRhZ3MgJiYgdGFncy5sZW5ndGgpIHtcbiAgICB0YWdzLmZvckVhY2goKHRhZykgPT4ge1xuICAgICAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiB0YWcpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YWcsIGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICBpZiAoYXR0cmlidXRlID09PSBcImlubmVySFRNTFwiIC8qIElOTkVSX0hUTUwgKi8pIHtcbiAgICAgICAgICAgIG5ld0VsZW1lbnQuaW5uZXJIVE1MID0gdGFnLmlubmVySFRNTDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZSA9PT0gXCJjc3NUZXh0XCIgLyogQ1NTX1RFWFQgKi8pIHtcbiAgICAgICAgICAgIGlmIChuZXdFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgICAgbmV3RWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSB0YWcuY3NzVGV4dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGFnLmNzc1RleHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYXR0ciA9IGF0dHJpYnV0ZTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHRhZ1thdHRyXSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiB0YWdbYXR0cl07XG4gICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUsIFwidHJ1ZVwiKTtcbiAgICAgIGlmIChvbGRUYWdzLnNvbWUoKGV4aXN0aW5nVGFnLCBpbmRleCkgPT4ge1xuICAgICAgICBpbmRleFRvRGVsZXRlID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBuZXdFbGVtZW50LmlzRXF1YWxOb2RlKGV4aXN0aW5nVGFnKTtcbiAgICAgIH0pKSB7XG4gICAgICAgIG9sZFRhZ3Muc3BsaWNlKGluZGV4VG9EZWxldGUsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VGFncy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG9sZFRhZ3MuZm9yRWFjaCgodGFnKSA9PiB0YWcucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQodGFnKSk7XG4gIG5ld1RhZ3MuZm9yRWFjaCgodGFnKSA9PiBoZWFkRWxlbWVudC5hcHBlbmRDaGlsZCh0YWcpKTtcbiAgcmV0dXJuIHtcbiAgICBvbGRUYWdzLFxuICAgIG5ld1RhZ3NcbiAgfTtcbn07XG52YXIgdXBkYXRlQXR0cmlidXRlcyA9ICh0YWdOYW1lLCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKVswXTtcbiAgaWYgKCFlbGVtZW50VGFnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGhlbG1ldEF0dHJpYnV0ZVN0cmluZyA9IGVsZW1lbnRUYWcuZ2V0QXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUpO1xuICBjb25zdCBoZWxtZXRBdHRyaWJ1dGVzID0gaGVsbWV0QXR0cmlidXRlU3RyaW5nID8gaGVsbWV0QXR0cmlidXRlU3RyaW5nLnNwbGl0KFwiLFwiKSA6IFtdO1xuICBjb25zdCBhdHRyaWJ1dGVzVG9SZW1vdmUgPSBbLi4uaGVsbWV0QXR0cmlidXRlc107XG4gIGNvbnN0IGF0dHJpYnV0ZUtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcbiAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlS2V5cykge1xuICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1thdHRyaWJ1dGVdIHx8IFwiXCI7XG4gICAgaWYgKGVsZW1lbnRUYWcuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgIT09IHZhbHVlKSB7XG4gICAgICBlbGVtZW50VGFnLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKGhlbG1ldEF0dHJpYnV0ZXMuaW5kZXhPZihhdHRyaWJ1dGUpID09PSAtMSkge1xuICAgICAgaGVsbWV0QXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XG4gICAgfVxuICAgIGNvbnN0IGluZGV4VG9TYXZlID0gYXR0cmlidXRlc1RvUmVtb3ZlLmluZGV4T2YoYXR0cmlidXRlKTtcbiAgICBpZiAoaW5kZXhUb1NhdmUgIT09IC0xKSB7XG4gICAgICBhdHRyaWJ1dGVzVG9SZW1vdmUuc3BsaWNlKGluZGV4VG9TYXZlLCAxKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IGF0dHJpYnV0ZXNUb1JlbW92ZS5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgIGVsZW1lbnRUYWcucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXNUb1JlbW92ZVtpXSk7XG4gIH1cbiAgaWYgKGhlbG1ldEF0dHJpYnV0ZXMubGVuZ3RoID09PSBhdHRyaWJ1dGVzVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgZWxlbWVudFRhZy5yZW1vdmVBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSk7XG4gIH0gZWxzZSBpZiAoZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSkgIT09IGF0dHJpYnV0ZUtleXMuam9pbihcIixcIikpIHtcbiAgICBlbGVtZW50VGFnLnNldEF0dHJpYnV0ZShIRUxNRVRfQVRUUklCVVRFLCBhdHRyaWJ1dGVLZXlzLmpvaW4oXCIsXCIpKTtcbiAgfVxufTtcbnZhciB1cGRhdGVUaXRsZSA9ICh0aXRsZSwgYXR0cmlidXRlcykgPT4ge1xuICBpZiAodHlwZW9mIHRpdGxlICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LnRpdGxlICE9PSB0aXRsZSkge1xuICAgIGRvY3VtZW50LnRpdGxlID0gZmxhdHRlbkFycmF5KHRpdGxlKTtcbiAgfVxuICB1cGRhdGVBdHRyaWJ1dGVzKFwidGl0bGVcIiAvKiBUSVRMRSAqLywgYXR0cmlidXRlcyk7XG59O1xudmFyIGNvbW1pdFRhZ0NoYW5nZXMgPSAobmV3U3RhdGUsIGNiKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBiYXNlVGFnLFxuICAgIGJvZHlBdHRyaWJ1dGVzLFxuICAgIGh0bWxBdHRyaWJ1dGVzLFxuICAgIGxpbmtUYWdzLFxuICAgIG1ldGFUYWdzLFxuICAgIG5vc2NyaXB0VGFncyxcbiAgICBvbkNoYW5nZUNsaWVudFN0YXRlLFxuICAgIHNjcmlwdFRhZ3MsXG4gICAgc3R5bGVUYWdzLFxuICAgIHRpdGxlLFxuICAgIHRpdGxlQXR0cmlidXRlc1xuICB9ID0gbmV3U3RhdGU7XG4gIHVwZGF0ZUF0dHJpYnV0ZXMoXCJib2R5XCIgLyogQk9EWSAqLywgYm9keUF0dHJpYnV0ZXMpO1xuICB1cGRhdGVBdHRyaWJ1dGVzKFwiaHRtbFwiIC8qIEhUTUwgKi8sIGh0bWxBdHRyaWJ1dGVzKTtcbiAgdXBkYXRlVGl0bGUodGl0bGUsIHRpdGxlQXR0cmlidXRlcyk7XG4gIGNvbnN0IHRhZ1VwZGF0ZXMgPSB7XG4gICAgYmFzZVRhZzogdXBkYXRlVGFncyhcImJhc2VcIiAvKiBCQVNFICovLCBiYXNlVGFnKSxcbiAgICBsaW5rVGFnczogdXBkYXRlVGFncyhcImxpbmtcIiAvKiBMSU5LICovLCBsaW5rVGFncyksXG4gICAgbWV0YVRhZ3M6IHVwZGF0ZVRhZ3MoXCJtZXRhXCIgLyogTUVUQSAqLywgbWV0YVRhZ3MpLFxuICAgIG5vc2NyaXB0VGFnczogdXBkYXRlVGFncyhcIm5vc2NyaXB0XCIgLyogTk9TQ1JJUFQgKi8sIG5vc2NyaXB0VGFncyksXG4gICAgc2NyaXB0VGFnczogdXBkYXRlVGFncyhcInNjcmlwdFwiIC8qIFNDUklQVCAqLywgc2NyaXB0VGFncyksXG4gICAgc3R5bGVUYWdzOiB1cGRhdGVUYWdzKFwic3R5bGVcIiAvKiBTVFlMRSAqLywgc3R5bGVUYWdzKVxuICB9O1xuICBjb25zdCBhZGRlZFRhZ3MgPSB7fTtcbiAgY29uc3QgcmVtb3ZlZFRhZ3MgPSB7fTtcbiAgT2JqZWN0LmtleXModGFnVXBkYXRlcykuZm9yRWFjaCgodGFnVHlwZSkgPT4ge1xuICAgIGNvbnN0IHsgbmV3VGFncywgb2xkVGFncyB9ID0gdGFnVXBkYXRlc1t0YWdUeXBlXTtcbiAgICBpZiAobmV3VGFncy5sZW5ndGgpIHtcbiAgICAgIGFkZGVkVGFnc1t0YWdUeXBlXSA9IG5ld1RhZ3M7XG4gICAgfVxuICAgIGlmIChvbGRUYWdzLmxlbmd0aCkge1xuICAgICAgcmVtb3ZlZFRhZ3NbdGFnVHlwZV0gPSB0YWdVcGRhdGVzW3RhZ1R5cGVdLm9sZFRhZ3M7XG4gICAgfVxuICB9KTtcbiAgaWYgKGNiKSB7XG4gICAgY2IoKTtcbiAgfVxuICBvbkNoYW5nZUNsaWVudFN0YXRlKG5ld1N0YXRlLCBhZGRlZFRhZ3MsIHJlbW92ZWRUYWdzKTtcbn07XG52YXIgX2hlbG1ldENhbGxiYWNrID0gbnVsbDtcbnZhciBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50ID0gKG5ld1N0YXRlKSA9PiB7XG4gIGlmIChfaGVsbWV0Q2FsbGJhY2spIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShfaGVsbWV0Q2FsbGJhY2spO1xuICB9XG4gIGlmIChuZXdTdGF0ZS5kZWZlcikge1xuICAgIF9oZWxtZXRDYWxsYmFjayA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjb21taXRUYWdDaGFuZ2VzKG5ld1N0YXRlLCAoKSA9PiB7XG4gICAgICAgIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb21taXRUYWdDaGFuZ2VzKG5ld1N0YXRlKTtcbiAgICBfaGVsbWV0Q2FsbGJhY2sgPSBudWxsO1xuICB9XG59O1xudmFyIGNsaWVudF9kZWZhdWx0ID0gaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudDtcblxuLy8gc3JjL0Rpc3BhdGNoZXIudHN4XG52YXIgSGVsbWV0RGlzcGF0Y2hlciA9IGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50MiB7XG4gIHJlbmRlcmVkID0gZmFsc2U7XG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChuZXh0UHJvcHMsIHRoaXMucHJvcHMpO1xuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb25zdCB7IGhlbG1ldEluc3RhbmNlcyB9ID0gdGhpcy5wcm9wcy5jb250ZXh0O1xuICAgIGhlbG1ldEluc3RhbmNlcy5yZW1vdmUodGhpcyk7XG4gICAgdGhpcy5lbWl0Q2hhbmdlKCk7XG4gIH1cbiAgZW1pdENoYW5nZSgpIHtcbiAgICBjb25zdCB7IGhlbG1ldEluc3RhbmNlcywgc2V0SGVsbWV0IH0gPSB0aGlzLnByb3BzLmNvbnRleHQ7XG4gICAgbGV0IHNlcnZlclN0YXRlID0gbnVsbDtcbiAgICBjb25zdCBzdGF0ZSA9IHJlZHVjZVByb3BzVG9TdGF0ZShcbiAgICAgIGhlbG1ldEluc3RhbmNlcy5nZXQoKS5tYXAoKGluc3RhbmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BzID0geyAuLi5pbnN0YW5jZS5wcm9wcyB9O1xuICAgICAgICBkZWxldGUgcHJvcHMuY29udGV4dDtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgfSlcbiAgICApO1xuICAgIGlmIChIZWxtZXRQcm92aWRlci5jYW5Vc2VET00pIHtcbiAgICAgIGNsaWVudF9kZWZhdWx0KHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHNlcnZlcl9kZWZhdWx0KSB7XG4gICAgICBzZXJ2ZXJTdGF0ZSA9IHNlcnZlcl9kZWZhdWx0KHN0YXRlKTtcbiAgICB9XG4gICAgc2V0SGVsbWV0KHNlcnZlclN0YXRlKTtcbiAgfVxuICAvLyBjb21wb25lbnRXaWxsTW91bnQgd2lsbCBiZSBkZXByZWNhdGVkXG4gIC8vIGZvciBTU1IsIGluaXRpYWxpemUgb24gZmlyc3QgcmVuZGVyXG4gIC8vIGNvbnN0cnVjdG9yIGlzIGFsc28gdW5zYWZlIGluIFN0cmljdE1vZGVcbiAgaW5pdCgpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcmVkID0gdHJ1ZTtcbiAgICBjb25zdCB7IGhlbG1ldEluc3RhbmNlcyB9ID0gdGhpcy5wcm9wcy5jb250ZXh0O1xuICAgIGhlbG1ldEluc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgdGhpcy5lbWl0Q2hhbmdlKCk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuaW5pdCgpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vLyBzcmMvaW5kZXgudHN4XG52YXIgSGVsbWV0ID0gY2xhc3MgZXh0ZW5kcyBDb21wb25lbnQzIHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBkZWZlcjogdHJ1ZSxcbiAgICBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVyczogdHJ1ZSxcbiAgICBwcmlvcml0aXplU2VvVGFnczogZmFsc2VcbiAgfTtcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHJldHVybiAhZmFzdENvbXBhcmUod2l0aG91dCh0aGlzLnByb3BzLCBcImhlbG1ldERhdGFcIiksIHdpdGhvdXQobmV4dFByb3BzLCBcImhlbG1ldERhdGFcIikpO1xuICB9XG4gIG1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyhjaGlsZCwgbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICBpZiAoIW5lc3RlZENoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpdGNoIChjaGlsZC50eXBlKSB7XG4gICAgICBjYXNlIFwic2NyaXB0XCIgLyogU0NSSVBUICovOlxuICAgICAgY2FzZSBcIm5vc2NyaXB0XCIgLyogTk9TQ1JJUFQgKi86XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5uZXJIVE1MOiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgY2FzZSBcInN0eWxlXCIgLyogU1RZTEUgKi86XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3NzVGV4dDogbmVzdGVkQ2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgPCR7Y2hpbGQudHlwZX0gLz4gZWxlbWVudHMgYXJlIHNlbGYtY2xvc2luZyBhbmQgY2FuIG5vdCBjb250YWluIGNoaWxkcmVuLiBSZWZlciB0byBvdXIgQVBJIGZvciBtb3JlIGluZm9ybWF0aW9uLmBcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZmxhdHRlbkFycmF5VHlwZUNoaWxkcmVuKGNoaWxkLCBhcnJheVR5cGVDaGlsZHJlbiwgbmV3Q2hpbGRQcm9wcywgbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYXJyYXlUeXBlQ2hpbGRyZW4sXG4gICAgICBbY2hpbGQudHlwZV06IFtcbiAgICAgICAgLi4uYXJyYXlUeXBlQ2hpbGRyZW5bY2hpbGQudHlwZV0gfHwgW10sXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5uZXdDaGlsZFByb3BzLFxuICAgICAgICAgIC4uLnRoaXMubWFwTmVzdGVkQ2hpbGRyZW5Ub1Byb3BzKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbilcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbiAgbWFwT2JqZWN0VHlwZUNoaWxkcmVuKGNoaWxkLCBuZXdQcm9wcywgbmV3Q2hpbGRQcm9wcywgbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICBzd2l0Y2ggKGNoaWxkLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJ0aXRsZVwiIC8qIFRJVExFICovOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm5ld1Byb3BzLFxuICAgICAgICAgIFtjaGlsZC50eXBlXTogbmVzdGVkQ2hpbGRyZW4sXG4gICAgICAgICAgdGl0bGVBdHRyaWJ1dGVzOiB7IC4uLm5ld0NoaWxkUHJvcHMgfVxuICAgICAgICB9O1xuICAgICAgY2FzZSBcImJvZHlcIiAvKiBCT0RZICovOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm5ld1Byb3BzLFxuICAgICAgICAgIGJvZHlBdHRyaWJ1dGVzOiB7IC4uLm5ld0NoaWxkUHJvcHMgfVxuICAgICAgICB9O1xuICAgICAgY2FzZSBcImh0bWxcIiAvKiBIVE1MICovOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm5ld1Byb3BzLFxuICAgICAgICAgIGh0bWxBdHRyaWJ1dGVzOiB7IC4uLm5ld0NoaWxkUHJvcHMgfVxuICAgICAgICB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5uZXdQcm9wcyxcbiAgICAgICAgICBbY2hpbGQudHlwZV06IHsgLi4ubmV3Q2hpbGRQcm9wcyB9XG4gICAgICAgIH07XG4gICAgfVxuICB9XG4gIG1hcEFycmF5VHlwZUNoaWxkcmVuVG9Qcm9wcyhhcnJheVR5cGVDaGlsZHJlbiwgbmV3UHJvcHMpIHtcbiAgICBsZXQgbmV3RmxhdHRlbmVkUHJvcHMgPSB7IC4uLm5ld1Byb3BzIH07XG4gICAgT2JqZWN0LmtleXMoYXJyYXlUeXBlQ2hpbGRyZW4pLmZvckVhY2goKGFycmF5Q2hpbGROYW1lKSA9PiB7XG4gICAgICBuZXdGbGF0dGVuZWRQcm9wcyA9IHtcbiAgICAgICAgLi4ubmV3RmxhdHRlbmVkUHJvcHMsXG4gICAgICAgIFthcnJheUNoaWxkTmFtZV06IGFycmF5VHlwZUNoaWxkcmVuW2FycmF5Q2hpbGROYW1lXVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3RmxhdHRlbmVkUHJvcHM7XG4gIH1cbiAgd2Fybk9uSW52YWxpZENoaWxkcmVuKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbikge1xuICAgIGludmFyaWFudChcbiAgICAgIFZBTElEX1RBR19OQU1FUy5zb21lKChuYW1lKSA9PiBjaGlsZC50eXBlID09PSBuYW1lKSxcbiAgICAgIHR5cGVvZiBjaGlsZC50eXBlID09PSBcImZ1bmN0aW9uXCIgPyBgWW91IG1heSBiZSBhdHRlbXB0aW5nIHRvIG5lc3QgPEhlbG1ldD4gY29tcG9uZW50cyB3aXRoaW4gZWFjaCBvdGhlciwgd2hpY2ggaXMgbm90IGFsbG93ZWQuIFJlZmVyIHRvIG91ciBBUEkgZm9yIG1vcmUgaW5mb3JtYXRpb24uYCA6IGBPbmx5IGVsZW1lbnRzIHR5cGVzICR7VkFMSURfVEFHX05BTUVTLmpvaW4oXG4gICAgICAgIFwiLCBcIlxuICAgICAgKX0gYXJlIGFsbG93ZWQuIEhlbG1ldCBkb2VzIG5vdCBzdXBwb3J0IHJlbmRlcmluZyA8JHtjaGlsZC50eXBlfT4gZWxlbWVudHMuIFJlZmVyIHRvIG91ciBBUEkgZm9yIG1vcmUgaW5mb3JtYXRpb24uYFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgIW5lc3RlZENoaWxkcmVuIHx8IHR5cGVvZiBuZXN0ZWRDaGlsZHJlbiA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG5lc3RlZENoaWxkcmVuKSAmJiAhbmVzdGVkQ2hpbGRyZW4uc29tZSgobmVzdGVkQ2hpbGQpID0+IHR5cGVvZiBuZXN0ZWRDaGlsZCAhPT0gXCJzdHJpbmdcIiksXG4gICAgICBgSGVsbWV0IGV4cGVjdHMgYSBzdHJpbmcgYXMgYSBjaGlsZCBvZiA8JHtjaGlsZC50eXBlfT4uIERpZCB5b3UgZm9yZ2V0IHRvIHdyYXAgeW91ciBjaGlsZHJlbiBpbiBicmFjZXM/ICggPCR7Y2hpbGQudHlwZX0+e1xcYFxcYH08LyR7Y2hpbGQudHlwZX0+ICkgUmVmZXIgdG8gb3VyIEFQSSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBtYXBDaGlsZHJlblRvUHJvcHMoY2hpbGRyZW4sIG5ld1Byb3BzKSB7XG4gICAgbGV0IGFycmF5VHlwZUNoaWxkcmVuID0ge307XG4gICAgUmVhY3QzLkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCkgPT4ge1xuICAgICAgaWYgKCFjaGlsZCB8fCAhY2hpbGQucHJvcHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBjaGlsZHJlbjogbmVzdGVkQ2hpbGRyZW4sIC4uLmNoaWxkUHJvcHMgfSA9IGNoaWxkLnByb3BzO1xuICAgICAgY29uc3QgbmV3Q2hpbGRQcm9wcyA9IE9iamVjdC5rZXlzKGNoaWxkUHJvcHMpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgICAgICAgb2JqW0hUTUxfVEFHX01BUFtrZXldIHx8IGtleV0gPSBjaGlsZFByb3BzW2tleV07XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9LCB7fSk7XG4gICAgICBsZXQgeyB0eXBlIH0gPSBjaGlsZDtcbiAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICB0eXBlID0gdHlwZS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53YXJuT25JbnZhbGlkQ2hpbGRyZW4oY2hpbGQsIG5lc3RlZENoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiU3ltYm9sKHJlYWN0LmZyYWdtZW50KVwiIC8qIEZSQUdNRU5UICovOlxuICAgICAgICAgIG5ld1Byb3BzID0gdGhpcy5tYXBDaGlsZHJlblRvUHJvcHMobmVzdGVkQ2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxpbmtcIiAvKiBMSU5LICovOlxuICAgICAgICBjYXNlIFwibWV0YVwiIC8qIE1FVEEgKi86XG4gICAgICAgIGNhc2UgXCJub3NjcmlwdFwiIC8qIE5PU0NSSVBUICovOlxuICAgICAgICBjYXNlIFwic2NyaXB0XCIgLyogU0NSSVBUICovOlxuICAgICAgICBjYXNlIFwic3R5bGVcIiAvKiBTVFlMRSAqLzpcbiAgICAgICAgICBhcnJheVR5cGVDaGlsZHJlbiA9IHRoaXMuZmxhdHRlbkFycmF5VHlwZUNoaWxkcmVuKFxuICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICBhcnJheVR5cGVDaGlsZHJlbixcbiAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMsXG4gICAgICAgICAgICBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbmV3UHJvcHMgPSB0aGlzLm1hcE9iamVjdFR5cGVDaGlsZHJlbihjaGlsZCwgbmV3UHJvcHMsIG5ld0NoaWxkUHJvcHMsIG5lc3RlZENoaWxkcmVuKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5tYXBBcnJheVR5cGVDaGlsZHJlblRvUHJvcHMoYXJyYXlUeXBlQ2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IG5ld1Byb3BzID0geyAuLi5wcm9wcyB9O1xuICAgIGxldCB7IGhlbG1ldERhdGEgfSA9IHByb3BzO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgbmV3UHJvcHMgPSB0aGlzLm1hcENoaWxkcmVuVG9Qcm9wcyhjaGlsZHJlbiwgbmV3UHJvcHMpO1xuICAgIH1cbiAgICBpZiAoaGVsbWV0RGF0YSAmJiAhKGhlbG1ldERhdGEgaW5zdGFuY2VvZiBIZWxtZXREYXRhKSkge1xuICAgICAgY29uc3QgZGF0YSA9IGhlbG1ldERhdGE7XG4gICAgICBoZWxtZXREYXRhID0gbmV3IEhlbG1ldERhdGEoZGF0YS5jb250ZXh0LCB0cnVlKTtcbiAgICAgIGRlbGV0ZSBuZXdQcm9wcy5oZWxtZXREYXRhO1xuICAgIH1cbiAgICByZXR1cm4gaGVsbWV0RGF0YSA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDMuY3JlYXRlRWxlbWVudChIZWxtZXREaXNwYXRjaGVyLCB7IC4uLm5ld1Byb3BzLCBjb250ZXh0OiBoZWxtZXREYXRhLnZhbHVlIH0pIDogLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KENvbnRleHQuQ29uc3VtZXIsIG51bGwsIChjb250ZXh0KSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3QzLmNyZWF0ZUVsZW1lbnQoSGVsbWV0RGlzcGF0Y2hlciwgeyAuLi5uZXdQcm9wcywgY29udGV4dCB9KSk7XG4gIH1cbn07XG5leHBvcnQge1xuICBIZWxtZXQsXG4gIEhlbG1ldERhdGEsXG4gIEhlbG1ldFByb3ZpZGVyXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-helmet-async/lib/index.esm.js\n");

/***/ })

};
;
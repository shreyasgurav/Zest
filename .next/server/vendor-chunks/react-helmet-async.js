"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-helmet-async";
exports.ids = ["vendor-chunks/react-helmet-async"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-helmet-async/lib/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-helmet-async/lib/index.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Helmet: () => (/* binding */ Helmet),\n/* harmony export */   HelmetData: () => (/* binding */ HelmetData),\n/* harmony export */   HelmetProvider: () => (/* binding */ HelmetProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_fast_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\");\n/* harmony import */ var react_fast_compare__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_fast_compare__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! invariant */ \"(ssr)/./node_modules/invariant/invariant.js\");\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(invariant__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shallowequal */ \"(ssr)/./node_modules/shallowequal/index.js\");\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_3__);\n// src/index.tsx\n\n\n\n// src/Provider.tsx\n\n// src/server.ts\n\n// src/constants.ts\nvar TAG_NAMES = /* @__PURE__ */ ((TAG_NAMES2)=>{\n    TAG_NAMES2[\"BASE\"] = \"base\";\n    TAG_NAMES2[\"BODY\"] = \"body\";\n    TAG_NAMES2[\"HEAD\"] = \"head\";\n    TAG_NAMES2[\"HTML\"] = \"html\";\n    TAG_NAMES2[\"LINK\"] = \"link\";\n    TAG_NAMES2[\"META\"] = \"meta\";\n    TAG_NAMES2[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES2[\"SCRIPT\"] = \"script\";\n    TAG_NAMES2[\"STYLE\"] = \"style\";\n    TAG_NAMES2[\"TITLE\"] = \"title\";\n    TAG_NAMES2[\"FRAGMENT\"] = \"Symbol(react.fragment)\";\n    return TAG_NAMES2;\n})(TAG_NAMES || {});\nvar SEO_PRIORITY_TAGS = {\n    link: {\n        rel: [\n            \"amphtml\",\n            \"canonical\",\n            \"alternate\"\n        ]\n    },\n    script: {\n        type: [\n            \"application/ld+json\"\n        ]\n    },\n    meta: {\n        charset: \"\",\n        name: [\n            \"generator\",\n            \"robots\",\n            \"description\"\n        ],\n        property: [\n            \"og:type\",\n            \"og:title\",\n            \"og:url\",\n            \"og:image\",\n            \"og:image:alt\",\n            \"og:description\",\n            \"twitter:url\",\n            \"twitter:title\",\n            \"twitter:description\",\n            \"twitter:image\",\n            \"twitter:image:alt\",\n            \"twitter:card\",\n            \"twitter:site\"\n        ]\n    }\n};\nvar VALID_TAG_NAMES = Object.values(TAG_NAMES);\nvar REACT_TAG_MAP = {\n    accesskey: \"accessKey\",\n    charset: \"charSet\",\n    class: \"className\",\n    contenteditable: \"contentEditable\",\n    contextmenu: \"contextMenu\",\n    \"http-equiv\": \"httpEquiv\",\n    itemprop: \"itemProp\",\n    tabindex: \"tabIndex\"\n};\nvar HTML_TAG_MAP = Object.entries(REACT_TAG_MAP).reduce((carry, [key, value])=>{\n    carry[value] = key;\n    return carry;\n}, {});\nvar HELMET_ATTRIBUTE = \"data-rh\";\n// src/utils.ts\nvar HELMET_PROPS = {\n    DEFAULT_TITLE: \"defaultTitle\",\n    DEFER: \"defer\",\n    ENCODE_SPECIAL_CHARACTERS: \"encodeSpecialCharacters\",\n    ON_CHANGE_CLIENT_STATE: \"onChangeClientState\",\n    TITLE_TEMPLATE: \"titleTemplate\",\n    PRIORITIZE_SEO_TAGS: \"prioritizeSeoTags\"\n};\nvar getInnermostProperty = (propsList, property)=>{\n    for(let i = propsList.length - 1; i >= 0; i -= 1){\n        const props = propsList[i];\n        if (Object.prototype.hasOwnProperty.call(props, property)) {\n            return props[property];\n        }\n    }\n    return null;\n};\nvar getTitleFromPropsList = (propsList)=>{\n    let innermostTitle = getInnermostProperty(propsList, \"title\" /* TITLE */ );\n    const innermostTemplate = getInnermostProperty(propsList, HELMET_PROPS.TITLE_TEMPLATE);\n    if (Array.isArray(innermostTitle)) {\n        innermostTitle = innermostTitle.join(\"\");\n    }\n    if (innermostTemplate && innermostTitle) {\n        return innermostTemplate.replace(/%s/g, ()=>innermostTitle);\n    }\n    const innermostDefaultTitle = getInnermostProperty(propsList, HELMET_PROPS.DEFAULT_TITLE);\n    return innermostTitle || innermostDefaultTitle || void 0;\n};\nvar getOnChangeClientState = (propsList)=>getInnermostProperty(propsList, HELMET_PROPS.ON_CHANGE_CLIENT_STATE) || (()=>{});\nvar getAttributesFromPropsList = (tagType, propsList)=>propsList.filter((props)=>typeof props[tagType] !== \"undefined\").map((props)=>props[tagType]).reduce((tagAttrs, current)=>({\n            ...tagAttrs,\n            ...current\n        }), {});\nvar getBaseTagFromPropsList = (primaryAttributes, propsList)=>propsList.filter((props)=>typeof props[\"base\" /* BASE */ ] !== \"undefined\").map((props)=>props[\"base\" /* BASE */ ]).reverse().reduce((innermostBaseTag, tag)=>{\n        if (!innermostBaseTag.length) {\n            const keys = Object.keys(tag);\n            for(let i = 0; i < keys.length; i += 1){\n                const attributeKey = keys[i];\n                const lowerCaseAttributeKey = attributeKey.toLowerCase();\n                if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && tag[lowerCaseAttributeKey]) {\n                    return innermostBaseTag.concat(tag);\n                }\n            }\n        }\n        return innermostBaseTag;\n    }, []);\nvar warn = (msg)=>console && typeof console.warn === \"function\" && console.warn(msg);\nvar getTagsFromPropsList = (tagName, primaryAttributes, propsList)=>{\n    const approvedSeenTags = {};\n    return propsList.filter((props)=>{\n        if (Array.isArray(props[tagName])) {\n            return true;\n        }\n        if (typeof props[tagName] !== \"undefined\") {\n            warn(`Helmet: ${tagName} should be of type \"Array\". Instead found type \"${typeof props[tagName]}\"`);\n        }\n        return false;\n    }).map((props)=>props[tagName]).reverse().reduce((approvedTags, instanceTags)=>{\n        const instanceSeenTags = {};\n        instanceTags.filter((tag)=>{\n            let primaryAttributeKey;\n            const keys2 = Object.keys(tag);\n            for(let i = 0; i < keys2.length; i += 1){\n                const attributeKey = keys2[i];\n                const lowerCaseAttributeKey = attributeKey.toLowerCase();\n                if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && !(primaryAttributeKey === \"rel\" /* REL */  && tag[primaryAttributeKey].toLowerCase() === \"canonical\") && !(lowerCaseAttributeKey === \"rel\" /* REL */  && tag[lowerCaseAttributeKey].toLowerCase() === \"stylesheet\")) {\n                    primaryAttributeKey = lowerCaseAttributeKey;\n                }\n                if (primaryAttributes.indexOf(attributeKey) !== -1 && (attributeKey === \"innerHTML\" /* INNER_HTML */  || attributeKey === \"cssText\" /* CSS_TEXT */  || attributeKey === \"itemprop\" /* ITEM_PROP */ )) {\n                    primaryAttributeKey = attributeKey;\n                }\n            }\n            if (!primaryAttributeKey || !tag[primaryAttributeKey]) {\n                return false;\n            }\n            const value = tag[primaryAttributeKey].toLowerCase();\n            if (!approvedSeenTags[primaryAttributeKey]) {\n                approvedSeenTags[primaryAttributeKey] = {};\n            }\n            if (!instanceSeenTags[primaryAttributeKey]) {\n                instanceSeenTags[primaryAttributeKey] = {};\n            }\n            if (!approvedSeenTags[primaryAttributeKey][value]) {\n                instanceSeenTags[primaryAttributeKey][value] = true;\n                return true;\n            }\n            return false;\n        }).reverse().forEach((tag)=>approvedTags.push(tag));\n        const keys = Object.keys(instanceSeenTags);\n        for(let i = 0; i < keys.length; i += 1){\n            const attributeKey = keys[i];\n            const tagUnion = {\n                ...approvedSeenTags[attributeKey],\n                ...instanceSeenTags[attributeKey]\n            };\n            approvedSeenTags[attributeKey] = tagUnion;\n        }\n        return approvedTags;\n    }, []).reverse();\n};\nvar getAnyTrueFromPropsList = (propsList, checkedTag)=>{\n    if (Array.isArray(propsList) && propsList.length) {\n        for(let index = 0; index < propsList.length; index += 1){\n            const prop = propsList[index];\n            if (prop[checkedTag]) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\nvar reducePropsToState = (propsList)=>({\n        baseTag: getBaseTagFromPropsList([\n            \"href\" /* HREF */ \n        ], propsList),\n        bodyAttributes: getAttributesFromPropsList(\"bodyAttributes\" /* BODY */ , propsList),\n        defer: getInnermostProperty(propsList, HELMET_PROPS.DEFER),\n        encode: getInnermostProperty(propsList, HELMET_PROPS.ENCODE_SPECIAL_CHARACTERS),\n        htmlAttributes: getAttributesFromPropsList(\"htmlAttributes\" /* HTML */ , propsList),\n        linkTags: getTagsFromPropsList(\"link\" /* LINK */ , [\n            \"rel\" /* REL */ ,\n            \"href\" /* HREF */ \n        ], propsList),\n        metaTags: getTagsFromPropsList(\"meta\" /* META */ , [\n            \"name\" /* NAME */ ,\n            \"charset\" /* CHARSET */ ,\n            \"http-equiv\" /* HTTPEQUIV */ ,\n            \"property\" /* PROPERTY */ ,\n            \"itemprop\" /* ITEM_PROP */ \n        ], propsList),\n        noscriptTags: getTagsFromPropsList(\"noscript\" /* NOSCRIPT */ , [\n            \"innerHTML\" /* INNER_HTML */ \n        ], propsList),\n        onChangeClientState: getOnChangeClientState(propsList),\n        scriptTags: getTagsFromPropsList(\"script\" /* SCRIPT */ , [\n            \"src\" /* SRC */ ,\n            \"innerHTML\" /* INNER_HTML */ \n        ], propsList),\n        styleTags: getTagsFromPropsList(\"style\" /* STYLE */ , [\n            \"cssText\" /* CSS_TEXT */ \n        ], propsList),\n        title: getTitleFromPropsList(propsList),\n        titleAttributes: getAttributesFromPropsList(\"titleAttributes\" /* TITLE */ , propsList),\n        prioritizeSeoTags: getAnyTrueFromPropsList(propsList, HELMET_PROPS.PRIORITIZE_SEO_TAGS)\n    });\nvar flattenArray = (possibleArray)=>Array.isArray(possibleArray) ? possibleArray.join(\"\") : possibleArray;\nvar checkIfPropsMatch = (props, toMatch)=>{\n    const keys = Object.keys(props);\n    for(let i = 0; i < keys.length; i += 1){\n        if (toMatch[keys[i]] && toMatch[keys[i]].includes(props[keys[i]])) {\n            return true;\n        }\n    }\n    return false;\n};\nvar prioritizer = (elementsList, propsToMatch)=>{\n    if (Array.isArray(elementsList)) {\n        return elementsList.reduce((acc, elementAttrs)=>{\n            if (checkIfPropsMatch(elementAttrs, propsToMatch)) {\n                acc.priority.push(elementAttrs);\n            } else {\n                acc.default.push(elementAttrs);\n            }\n            return acc;\n        }, {\n            priority: [],\n            default: []\n        });\n    }\n    return {\n        default: elementsList,\n        priority: []\n    };\n};\nvar without = (obj, key)=>{\n    return {\n        ...obj,\n        [key]: void 0\n    };\n};\n// src/server.ts\nvar SELF_CLOSING_TAGS = [\n    \"noscript\" /* NOSCRIPT */ ,\n    \"script\" /* SCRIPT */ ,\n    \"style\" /* STYLE */ \n];\nvar encodeSpecialCharacters = (str, encode = true)=>{\n    if (encode === false) {\n        return String(str);\n    }\n    return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\");\n};\nvar generateElementAttributesAsString = (attributes)=>Object.keys(attributes).reduce((str, key)=>{\n        const attr = typeof attributes[key] !== \"undefined\" ? `${key}=\"${attributes[key]}\"` : `${key}`;\n        return str ? `${str} ${attr}` : attr;\n    }, \"\");\nvar generateTitleAsString = (type, title, attributes, encode)=>{\n    const attributeString = generateElementAttributesAsString(attributes);\n    const flattenedTitle = flattenArray(title);\n    return attributeString ? `<${type} ${HELMET_ATTRIBUTE}=\"true\" ${attributeString}>${encodeSpecialCharacters(flattenedTitle, encode)}</${type}>` : `<${type} ${HELMET_ATTRIBUTE}=\"true\">${encodeSpecialCharacters(flattenedTitle, encode)}</${type}>`;\n};\nvar generateTagsAsString = (type, tags, encode = true)=>tags.reduce((str, t)=>{\n        const tag = t;\n        const attributeHtml = Object.keys(tag).filter((attribute)=>!(attribute === \"innerHTML\" /* INNER_HTML */  || attribute === \"cssText\" /* CSS_TEXT */ )).reduce((string, attribute)=>{\n            const attr = typeof tag[attribute] === \"undefined\" ? attribute : `${attribute}=\"${encodeSpecialCharacters(tag[attribute], encode)}\"`;\n            return string ? `${string} ${attr}` : attr;\n        }, \"\");\n        const tagContent = tag.innerHTML || tag.cssText || \"\";\n        const isSelfClosing = SELF_CLOSING_TAGS.indexOf(type) === -1;\n        return `${str}<${type} ${HELMET_ATTRIBUTE}=\"true\" ${attributeHtml}${isSelfClosing ? `/>` : `>${tagContent}</${type}>`}`;\n    }, \"\");\nvar convertElementAttributesToReactProps = (attributes, initProps = {})=>Object.keys(attributes).reduce((obj, key)=>{\n        const mapped = REACT_TAG_MAP[key];\n        obj[mapped || key] = attributes[key];\n        return obj;\n    }, initProps);\nvar generateTitleAsReactComponent = (_type, title, attributes)=>{\n    const initProps = {\n        key: title,\n        [HELMET_ATTRIBUTE]: true\n    };\n    const props = convertElementAttributesToReactProps(attributes, initProps);\n    return [\n        /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"title\" /* TITLE */ , props, title)\n    ];\n};\nvar generateTagsAsReactComponent = (type, tags)=>tags.map((tag, i)=>{\n        const mappedTag = {\n            key: i,\n            [HELMET_ATTRIBUTE]: true\n        };\n        Object.keys(tag).forEach((attribute)=>{\n            const mapped = REACT_TAG_MAP[attribute];\n            const mappedAttribute = mapped || attribute;\n            if (mappedAttribute === \"innerHTML\" /* INNER_HTML */  || mappedAttribute === \"cssText\" /* CSS_TEXT */ ) {\n                const content = tag.innerHTML || tag.cssText;\n                mappedTag.dangerouslySetInnerHTML = {\n                    __html: content\n                };\n            } else {\n                mappedTag[mappedAttribute] = tag[attribute];\n            }\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(type, mappedTag);\n    });\nvar getMethodsForTag = (type, tags, encode = true)=>{\n    switch(type){\n        case \"title\" /* TITLE */ :\n            return {\n                toComponent: ()=>generateTitleAsReactComponent(type, tags.title, tags.titleAttributes),\n                toString: ()=>generateTitleAsString(type, tags.title, tags.titleAttributes, encode)\n            };\n        case \"bodyAttributes\" /* BODY */ :\n        case \"htmlAttributes\" /* HTML */ :\n            return {\n                toComponent: ()=>convertElementAttributesToReactProps(tags),\n                toString: ()=>generateElementAttributesAsString(tags)\n            };\n        default:\n            return {\n                toComponent: ()=>generateTagsAsReactComponent(type, tags),\n                toString: ()=>generateTagsAsString(type, tags, encode)\n            };\n    }\n};\nvar getPriorityMethods = ({ metaTags, linkTags, scriptTags, encode })=>{\n    const meta = prioritizer(metaTags, SEO_PRIORITY_TAGS.meta);\n    const link = prioritizer(linkTags, SEO_PRIORITY_TAGS.link);\n    const script = prioritizer(scriptTags, SEO_PRIORITY_TAGS.script);\n    const priorityMethods = {\n        toComponent: ()=>[\n                ...generateTagsAsReactComponent(\"meta\" /* META */ , meta.priority),\n                ...generateTagsAsReactComponent(\"link\" /* LINK */ , link.priority),\n                ...generateTagsAsReactComponent(\"script\" /* SCRIPT */ , script.priority)\n            ],\n        toString: ()=>// generate all the tags as strings and concatenate them\n            `${getMethodsForTag(\"meta\" /* META */ , meta.priority, encode)} ${getMethodsForTag(\"link\" /* LINK */ , link.priority, encode)} ${getMethodsForTag(\"script\" /* SCRIPT */ , script.priority, encode)}`\n    };\n    return {\n        priorityMethods,\n        metaTags: meta.default,\n        linkTags: link.default,\n        scriptTags: script.default\n    };\n};\nvar mapStateOnServer = (props)=>{\n    const { baseTag, bodyAttributes, encode = true, htmlAttributes, noscriptTags, styleTags, title = \"\", titleAttributes, prioritizeSeoTags } = props;\n    let { linkTags, metaTags, scriptTags } = props;\n    let priorityMethods = {\n        toComponent: ()=>{},\n        toString: ()=>\"\"\n    };\n    if (prioritizeSeoTags) {\n        ({ priorityMethods, linkTags, metaTags, scriptTags } = getPriorityMethods(props));\n    }\n    return {\n        priority: priorityMethods,\n        base: getMethodsForTag(\"base\" /* BASE */ , baseTag, encode),\n        bodyAttributes: getMethodsForTag(\"bodyAttributes\" /* BODY */ , bodyAttributes, encode),\n        htmlAttributes: getMethodsForTag(\"htmlAttributes\" /* HTML */ , htmlAttributes, encode),\n        link: getMethodsForTag(\"link\" /* LINK */ , linkTags, encode),\n        meta: getMethodsForTag(\"meta\" /* META */ , metaTags, encode),\n        noscript: getMethodsForTag(\"noscript\" /* NOSCRIPT */ , noscriptTags, encode),\n        script: getMethodsForTag(\"script\" /* SCRIPT */ , scriptTags, encode),\n        style: getMethodsForTag(\"style\" /* STYLE */ , styleTags, encode),\n        title: getMethodsForTag(\"title\" /* TITLE */ , {\n            title,\n            titleAttributes\n        }, encode)\n    };\n};\nvar server_default = mapStateOnServer;\n// src/HelmetData.ts\nvar instances = [];\nvar isDocument = !!( false && 0);\nvar HelmetData = class {\n    constructor(context, canUseDOM){\n        this.instances = [];\n        this.canUseDOM = isDocument;\n        this.value = {\n            setHelmet: (serverState)=>{\n                this.context.helmet = serverState;\n            },\n            helmetInstances: {\n                get: ()=>this.canUseDOM ? instances : this.instances,\n                add: (instance)=>{\n                    (this.canUseDOM ? instances : this.instances).push(instance);\n                },\n                remove: (instance)=>{\n                    const index = (this.canUseDOM ? instances : this.instances).indexOf(instance);\n                    (this.canUseDOM ? instances : this.instances).splice(index, 1);\n                }\n            }\n        };\n        this.context = context;\n        this.canUseDOM = canUseDOM || false;\n        if (!canUseDOM) {\n            context.helmet = server_default({\n                baseTag: [],\n                bodyAttributes: {},\n                encodeSpecialCharacters: true,\n                htmlAttributes: {},\n                linkTags: [],\n                metaTags: [],\n                noscriptTags: [],\n                scriptTags: [],\n                styleTags: [],\n                title: \"\",\n                titleAttributes: {}\n            });\n        }\n    }\n};\n// src/Provider.tsx\nvar defaultValue = {};\nvar Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(defaultValue);\nvar HelmetProvider = class _HelmetProvider extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    static{\n        this.canUseDOM = isDocument;\n    }\n    constructor(props){\n        super(props);\n        this.helmetData = new HelmetData(this.props.context || {}, _HelmetProvider.canUseDOM);\n    }\n    render() {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, {\n            value: this.helmetData.value\n        }, this.props.children);\n    }\n};\n// src/Dispatcher.tsx\n\n\n// src/client.ts\nvar updateTags = (type, tags)=>{\n    const headElement = document.head || document.querySelector(\"head\" /* HEAD */ );\n    const tagNodes = headElement.querySelectorAll(`${type}[${HELMET_ATTRIBUTE}]`);\n    const oldTags = [].slice.call(tagNodes);\n    const newTags = [];\n    let indexToDelete;\n    if (tags && tags.length) {\n        tags.forEach((tag)=>{\n            const newElement = document.createElement(type);\n            for(const attribute in tag){\n                if (Object.prototype.hasOwnProperty.call(tag, attribute)) {\n                    if (attribute === \"innerHTML\" /* INNER_HTML */ ) {\n                        newElement.innerHTML = tag.innerHTML;\n                    } else if (attribute === \"cssText\" /* CSS_TEXT */ ) {\n                        if (newElement.styleSheet) {\n                            newElement.styleSheet.cssText = tag.cssText;\n                        } else {\n                            newElement.appendChild(document.createTextNode(tag.cssText));\n                        }\n                    } else {\n                        const attr = attribute;\n                        const value = typeof tag[attr] === \"undefined\" ? \"\" : tag[attr];\n                        newElement.setAttribute(attribute, value);\n                    }\n                }\n            }\n            newElement.setAttribute(HELMET_ATTRIBUTE, \"true\");\n            if (oldTags.some((existingTag, index)=>{\n                indexToDelete = index;\n                return newElement.isEqualNode(existingTag);\n            })) {\n                oldTags.splice(indexToDelete, 1);\n            } else {\n                newTags.push(newElement);\n            }\n        });\n    }\n    oldTags.forEach((tag)=>tag.parentNode?.removeChild(tag));\n    newTags.forEach((tag)=>headElement.appendChild(tag));\n    return {\n        oldTags,\n        newTags\n    };\n};\nvar updateAttributes = (tagName, attributes)=>{\n    const elementTag = document.getElementsByTagName(tagName)[0];\n    if (!elementTag) {\n        return;\n    }\n    const helmetAttributeString = elementTag.getAttribute(HELMET_ATTRIBUTE);\n    const helmetAttributes = helmetAttributeString ? helmetAttributeString.split(\",\") : [];\n    const attributesToRemove = [\n        ...helmetAttributes\n    ];\n    const attributeKeys = Object.keys(attributes);\n    for (const attribute of attributeKeys){\n        const value = attributes[attribute] || \"\";\n        if (elementTag.getAttribute(attribute) !== value) {\n            elementTag.setAttribute(attribute, value);\n        }\n        if (helmetAttributes.indexOf(attribute) === -1) {\n            helmetAttributes.push(attribute);\n        }\n        const indexToSave = attributesToRemove.indexOf(attribute);\n        if (indexToSave !== -1) {\n            attributesToRemove.splice(indexToSave, 1);\n        }\n    }\n    for(let i = attributesToRemove.length - 1; i >= 0; i -= 1){\n        elementTag.removeAttribute(attributesToRemove[i]);\n    }\n    if (helmetAttributes.length === attributesToRemove.length) {\n        elementTag.removeAttribute(HELMET_ATTRIBUTE);\n    } else if (elementTag.getAttribute(HELMET_ATTRIBUTE) !== attributeKeys.join(\",\")) {\n        elementTag.setAttribute(HELMET_ATTRIBUTE, attributeKeys.join(\",\"));\n    }\n};\nvar updateTitle = (title, attributes)=>{\n    if (typeof title !== \"undefined\" && document.title !== title) {\n        document.title = flattenArray(title);\n    }\n    updateAttributes(\"title\" /* TITLE */ , attributes);\n};\nvar commitTagChanges = (newState, cb)=>{\n    const { baseTag, bodyAttributes, htmlAttributes, linkTags, metaTags, noscriptTags, onChangeClientState, scriptTags, styleTags, title, titleAttributes } = newState;\n    updateAttributes(\"body\" /* BODY */ , bodyAttributes);\n    updateAttributes(\"html\" /* HTML */ , htmlAttributes);\n    updateTitle(title, titleAttributes);\n    const tagUpdates = {\n        baseTag: updateTags(\"base\" /* BASE */ , baseTag),\n        linkTags: updateTags(\"link\" /* LINK */ , linkTags),\n        metaTags: updateTags(\"meta\" /* META */ , metaTags),\n        noscriptTags: updateTags(\"noscript\" /* NOSCRIPT */ , noscriptTags),\n        scriptTags: updateTags(\"script\" /* SCRIPT */ , scriptTags),\n        styleTags: updateTags(\"style\" /* STYLE */ , styleTags)\n    };\n    const addedTags = {};\n    const removedTags = {};\n    Object.keys(tagUpdates).forEach((tagType)=>{\n        const { newTags, oldTags } = tagUpdates[tagType];\n        if (newTags.length) {\n            addedTags[tagType] = newTags;\n        }\n        if (oldTags.length) {\n            removedTags[tagType] = tagUpdates[tagType].oldTags;\n        }\n    });\n    if (cb) {\n        cb();\n    }\n    onChangeClientState(newState, addedTags, removedTags);\n};\nvar _helmetCallback = null;\nvar handleStateChangeOnClient = (newState)=>{\n    if (_helmetCallback) {\n        cancelAnimationFrame(_helmetCallback);\n    }\n    if (newState.defer) {\n        _helmetCallback = requestAnimationFrame(()=>{\n            commitTagChanges(newState, ()=>{\n                _helmetCallback = null;\n            });\n        });\n    } else {\n        commitTagChanges(newState);\n        _helmetCallback = null;\n    }\n};\nvar client_default = handleStateChangeOnClient;\n// src/Dispatcher.tsx\nvar HelmetDispatcher = class extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    shouldComponentUpdate(nextProps) {\n        return !shallowequal__WEBPACK_IMPORTED_MODULE_3___default()(nextProps, this.props);\n    }\n    componentDidUpdate() {\n        this.emitChange();\n    }\n    componentWillUnmount() {\n        const { helmetInstances } = this.props.context;\n        helmetInstances.remove(this);\n        this.emitChange();\n    }\n    emitChange() {\n        const { helmetInstances, setHelmet } = this.props.context;\n        let serverState = null;\n        const state = reducePropsToState(helmetInstances.get().map((instance)=>{\n            const props = {\n                ...instance.props\n            };\n            delete props.context;\n            return props;\n        }));\n        if (HelmetProvider.canUseDOM) {\n            client_default(state);\n        } else if (server_default) {\n            serverState = server_default(state);\n        }\n        setHelmet(serverState);\n    }\n    // componentWillMount will be deprecated\n    // for SSR, initialize on first render\n    // constructor is also unsafe in StrictMode\n    init() {\n        if (this.rendered) {\n            return;\n        }\n        this.rendered = true;\n        const { helmetInstances } = this.props.context;\n        helmetInstances.add(this);\n        this.emitChange();\n    }\n    render() {\n        this.init();\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.rendered = false;\n    }\n};\n// src/index.tsx\nvar Helmet = class extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    static{\n        this.defaultProps = {\n            defer: true,\n            encodeSpecialCharacters: true,\n            prioritizeSeoTags: false\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        return !react_fast_compare__WEBPACK_IMPORTED_MODULE_1___default()(without(this.props, \"helmetData\"), without(nextProps, \"helmetData\"));\n    }\n    mapNestedChildrenToProps(child, nestedChildren) {\n        if (!nestedChildren) {\n            return null;\n        }\n        switch(child.type){\n            case \"script\" /* SCRIPT */ :\n            case \"noscript\" /* NOSCRIPT */ :\n                return {\n                    innerHTML: nestedChildren\n                };\n            case \"style\" /* STYLE */ :\n                return {\n                    cssText: nestedChildren\n                };\n            default:\n                throw new Error(`<${child.type} /> elements are self-closing and can not contain children. Refer to our API for more information.`);\n        }\n    }\n    flattenArrayTypeChildren(child, arrayTypeChildren, newChildProps, nestedChildren) {\n        return {\n            ...arrayTypeChildren,\n            [child.type]: [\n                ...arrayTypeChildren[child.type] || [],\n                {\n                    ...newChildProps,\n                    ...this.mapNestedChildrenToProps(child, nestedChildren)\n                }\n            ]\n        };\n    }\n    mapObjectTypeChildren(child, newProps, newChildProps, nestedChildren) {\n        switch(child.type){\n            case \"title\" /* TITLE */ :\n                return {\n                    ...newProps,\n                    [child.type]: nestedChildren,\n                    titleAttributes: {\n                        ...newChildProps\n                    }\n                };\n            case \"body\" /* BODY */ :\n                return {\n                    ...newProps,\n                    bodyAttributes: {\n                        ...newChildProps\n                    }\n                };\n            case \"html\" /* HTML */ :\n                return {\n                    ...newProps,\n                    htmlAttributes: {\n                        ...newChildProps\n                    }\n                };\n            default:\n                return {\n                    ...newProps,\n                    [child.type]: {\n                        ...newChildProps\n                    }\n                };\n        }\n    }\n    mapArrayTypeChildrenToProps(arrayTypeChildren, newProps) {\n        let newFlattenedProps = {\n            ...newProps\n        };\n        Object.keys(arrayTypeChildren).forEach((arrayChildName)=>{\n            newFlattenedProps = {\n                ...newFlattenedProps,\n                [arrayChildName]: arrayTypeChildren[arrayChildName]\n            };\n        });\n        return newFlattenedProps;\n    }\n    warnOnInvalidChildren(child, nestedChildren) {\n        invariant__WEBPACK_IMPORTED_MODULE_2___default()(VALID_TAG_NAMES.some((name)=>child.type === name), typeof child.type === \"function\" ? `You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.` : `Only elements types ${VALID_TAG_NAMES.join(\", \")} are allowed. Helmet does not support rendering <${child.type}> elements. Refer to our API for more information.`);\n        invariant__WEBPACK_IMPORTED_MODULE_2___default()(!nestedChildren || typeof nestedChildren === \"string\" || Array.isArray(nestedChildren) && !nestedChildren.some((nestedChild)=>typeof nestedChild !== \"string\"), `Helmet expects a string as a child of <${child.type}>. Did you forget to wrap your children in braces? ( <${child.type}>{\\`\\`}</${child.type}> ) Refer to our API for more information.`);\n        return true;\n    }\n    mapChildrenToProps(children, newProps) {\n        let arrayTypeChildren = {};\n        react__WEBPACK_IMPORTED_MODULE_0___default().Children.forEach(children, (child)=>{\n            if (!child || !child.props) {\n                return;\n            }\n            const { children: nestedChildren, ...childProps } = child.props;\n            const newChildProps = Object.keys(childProps).reduce((obj, key)=>{\n                obj[HTML_TAG_MAP[key] || key] = childProps[key];\n                return obj;\n            }, {});\n            let { type } = child;\n            if (typeof type === \"symbol\") {\n                type = type.toString();\n            } else {\n                this.warnOnInvalidChildren(child, nestedChildren);\n            }\n            switch(type){\n                case \"Symbol(react.fragment)\" /* FRAGMENT */ :\n                    newProps = this.mapChildrenToProps(nestedChildren, newProps);\n                    break;\n                case \"link\" /* LINK */ :\n                case \"meta\" /* META */ :\n                case \"noscript\" /* NOSCRIPT */ :\n                case \"script\" /* SCRIPT */ :\n                case \"style\" /* STYLE */ :\n                    arrayTypeChildren = this.flattenArrayTypeChildren(child, arrayTypeChildren, newChildProps, nestedChildren);\n                    break;\n                default:\n                    newProps = this.mapObjectTypeChildren(child, newProps, newChildProps, nestedChildren);\n                    break;\n            }\n        });\n        return this.mapArrayTypeChildrenToProps(arrayTypeChildren, newProps);\n    }\n    render() {\n        const { children, ...props } = this.props;\n        let newProps = {\n            ...props\n        };\n        let { helmetData } = props;\n        if (children) {\n            newProps = this.mapChildrenToProps(children, newProps);\n        }\n        if (helmetData && !(helmetData instanceof HelmetData)) {\n            const data = helmetData;\n            helmetData = new HelmetData(data.context, true);\n            delete newProps.helmetData;\n        }\n        return helmetData ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HelmetDispatcher, {\n            ...newProps,\n            context: helmetData.value\n        }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Consumer, null, (context)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HelmetDispatcher, {\n                ...newProps,\n                context\n            }));\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-helmet-async/lib/index.esm.js\n");

/***/ })

};
;
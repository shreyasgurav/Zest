"use strict";(()=>{var e={};e.id=2872,e.ids=[2872],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6113:e=>{e.exports=require("crypto")},53001:(e,t,i)=>{i.r(t),i.d(t,{headerHooks:()=>I,originalPathname:()=>h,patchFetch:()=>E,requestAsyncStorage:()=>p,routeModule:()=>v,serverHooks:()=>k,staticGenerationAsyncStorage:()=>f,staticGenerationBailout:()=>S});var o={};i.r(o),i.d(o,{POST:()=>m});var a=i(95419),n=i(69108),r=i(99678),s=i(78070),c=i(6113),l=i.n(c),d=i(87447);function u(){let e=Date.now().toString(36),t=Math.random().toString(36).substring(2,8);return`ZST-${e}-${t}`.toUpperCase()}function g(e,t){return JSON.stringify({ticketId:e,ticketNumber:t,platform:"zest",timestamp:Date.now(),version:"1.0"})}async function y(e,t,i){try{console.log("Creating tickets for booking:",t,"Type:",i);let o=[],a=[],n="",r="";if("event"===i){let i=await d.i.collection("events").doc(e.eventId).get();if(i.exists){let e=i.data();n=e?.title||e?.eventTitle||"Event",r=e?.event_venue||e?.eventVenue||"Venue TBD"}let a=Object.entries(e.tickets);for(let[i,s]of a)for(let c=0;c<s;c++){let s=u(),l=`ticket_${t}_${i}_${c+1}`,d=g(l,s),y={id:l,ticketNumber:s,qrCode:d,userId:e.userId,userName:e.name,userEmail:e.email,userPhone:e.phone,type:"event",eventId:e.eventId,title:n,venue:r,bookingId:t,selectedDate:e.selectedDate,selectedTimeSlot:e.selectedTimeSlot,ticketType:i,ticketQuantity:1,amount:e.totalAmount/a.reduce((e,[,t])=>e+t,0),paymentId:e.paymentId,paymentStatus:e.paymentStatus,status:"active",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isValid:!0,validationHistory:[{timestamp:new Date().toISOString(),action:"created"}]};o.push(y)}}else if("activity"===i){let i=await d.i.collection("activities").doc(e.activityId).get();if(i.exists){let e=i.data();n=e?.name||"Activity",r=e?.location||"Location TBD"}let a=e.tickets;for(let i=0;i<a;i++){let s=u(),c=`ticket_${t}_${i+1}`,l=g(c,s),d={id:c,ticketNumber:s,qrCode:l,userId:e.userId,userName:e.name,userEmail:e.email,userPhone:e.phone,type:"activity",activityId:e.activityId,title:n,venue:r,bookingId:t,selectedDate:e.selectedDate,selectedTimeSlot:e.selectedTimeSlot,quantity:1,amount:e.totalAmount/a,paymentId:e.paymentId,paymentStatus:e.paymentStatus,status:"active",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isValid:!0,validationHistory:[{timestamp:new Date().toISOString(),action:"created"}]};o.push(d)}}let s=d.i.batch();for(let e of o){let t=d.i.collection("tickets").doc(e.id);s.set(t,e),a.push(e.id)}return await s.commit(),console.log(`Successfully created ${o.length} tickets for booking ${t}`),a}catch(e){throw console.error("Error creating tickets:",e),Error("Failed to create tickets")}}async function m(e){try{let{razorpay_order_id:t,razorpay_payment_id:i,razorpay_signature:o,bookingData:a,bookingType:n}=await e.json();if(!t||!i||!o)return s.Z.json({error:"Missing payment verification data"},{status:400});let r=l().createHmac("sha256",process.env.RAZORPAY_KEY_SECRET);if(r.update(`${t}|${i}`),r.digest("hex")!==o)return s.Z.json({error:"Payment verification failed"},{status:400});try{let e;console.log("Payment verified successfully, attempting to save booking..."),console.log("Booking type:",n),console.log("Booking data:",JSON.stringify(a,null,2));let r=new Date().toISOString(),c={...a,paymentStatus:"completed",paymentId:i,orderId:t,paymentSignature:o,status:"confirmed",createdAt:r,updatedAt:r};if(console.log("Final booking data to be saved:",JSON.stringify(c,null,2)),"event"===n){if(console.log("Saving event booking to eventAttendees collection"),!a.eventId)throw Error("Event ID is required for event booking");e=(await d.i.collection("eventAttendees").add(c)).id,console.log("Event booking saved successfully with ID:",e)}else if("activity"===n){if(console.log("Saving activity booking to activity_bookings collection"),!a.activityId)throw Error("Activity ID is required for activity booking");if(e=(await d.i.collection("activity_bookings").add(c)).id,console.log("Activity booking saved successfully with ID:",e),a.activityId&&a.selectedDate&&a.selectedTimeSlot&&a.tickets)try{console.log("Updating activity capacity...");let e=d.i.collection("activities").doc(a.activityId),t=await e.get();if(t.exists){let i=t.data(),o=new Date(a.selectedDate).toLocaleDateString("en-US",{weekday:"long"}),n=i?.weekly_schedule.map(e=>e.day===o?{...e,time_slots:e.time_slots.map(e=>e.start_time===a.selectedTimeSlot.start_time&&e.end_time===a.selectedTimeSlot.end_time?{...e,available_capacity:Math.max(0,e.available_capacity-a.tickets)}:e)}:e);await e.update({weekly_schedule:n}),console.log("Activity capacity updated successfully")}else console.warn("Activity document not found for ID:",a.activityId)}catch(e){console.error("Error updating activity capacity:",e)}}else throw Error(`Invalid booking type: ${n}`);console.log("Booking saved successfully with ID:",e);try{console.log("Creating tickets for booking...");let t=await y(c,e,n);return console.log(`Successfully created ${t.length} tickets:`,t),s.Z.json({success:!0,bookingId:e,ticketIds:t,message:"Payment verified, booking confirmed, and tickets created"})}catch(t){return console.error("Error creating tickets:",t),s.Z.json({success:!0,bookingId:e,message:"Payment verified and booking confirmed (tickets creation pending)",warning:"Tickets could not be created immediately but booking is confirmed"})}}catch(t){console.error("Error saving booking to database:",t),console.error("Error type:",typeof t),console.error("Error name:",t instanceof Error?t.name:"Unknown"),console.error("Error message:",t instanceof Error?t.message:String(t)),console.error("Error stack:",t instanceof Error?t.stack:"No stack trace"),console.error("Booking data that failed:",JSON.stringify(a,null,2)),console.error("Booking type:",n);let e=t instanceof Error?t.message:"Unknown database error";return s.Z.json({error:"Payment verified but failed to save booking",details:e,debugInfo:{bookingType:n,hasEventId:!!a.eventId,hasActivityId:!!a.activityId,hasUserId:!!a.userId,timestamp:new Date().toISOString()}},{status:500})}}catch(e){return console.error("Error verifying payment:",e),s.Z.json({error:"Payment verification failed",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let v=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/payment/verify/route",pathname:"/api/payment/verify",filename:"route",bundlePath:"app/api/payment/verify/route"},resolvedPagePath:"/Users/shreyasgurav/Documents/Projects/Zest Deployed/src/app/api/payment/verify/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:p,staticGenerationAsyncStorage:f,serverHooks:k,headerHooks:I,staticGenerationBailout:S}=v,h="/api/payment/verify/route";function E(){return(0,r.patchFetch)({serverHooks:k,staticGenerationAsyncStorage:f})}},87447:(e,t,i)=>{i.d(t,{i:()=>n});let o=require("firebase-admin");var a=i.n(o);if(!a().apps.length){let e=process.env.FIREBASE_PRIVATE_KEY,t=process.env.FIREBASE_CLIENT_EMAIL,i="zest-62191";if(console.log("Initializing Firebase Admin SDK..."),console.log("Project ID:",i),console.log("Client Email:",t),console.log("Private Key exists:",!!e),e&&t&&i)try{console.log("Using service account credentials"),a().initializeApp({credential:a().credential.cert({projectId:i,clientEmail:t,privateKey:e.replace(/\\n/g,"\n")}),projectId:i,databaseURL:`https://${i}.firebaseio.com`}),console.log("Firebase Admin SDK initialized successfully with service account")}catch(e){throw console.error("Failed to initialize Firebase Admin SDK with service account:",e),e}else throw Error("Firebase Admin SDK requires service account credentials in production. Please set FIREBASE_PRIVATE_KEY and FIREBASE_CLIENT_EMAIL environment variables.")}let n=a().firestore()}};var t=require("../../../../webpack-runtime.js");t.C(e);var i=e=>t(t.s=e),o=t.X(0,[1638,6206],()=>i(53001));module.exports=o})();
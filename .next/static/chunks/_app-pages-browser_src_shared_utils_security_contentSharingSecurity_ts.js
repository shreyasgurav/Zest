"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_shared_utils_security_contentSharingSecurity_ts"],{

/***/ "(app-pages-browser)/./src/shared/utils/security/contentSharingSecurity.ts":
/*!*************************************************************!*\
  !*** ./src/shared/utils/security/contentSharingSecurity.ts ***!
  \*************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentSharingSecurity: function() { return /* binding */ ContentSharingSecurity; }\n/* harmony export */ });\n/* harmony import */ var _infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/infrastructure/firebase */ \"(app-pages-browser)/./src/infrastructure/firebase/index.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n\n\n\n// Security Constants\nconst SECURITY_LIMITS = {\n    maxSharesPerContent: 100,\n    maxSharesPerUser: 1000,\n    maxInvitationsPerHour: 10,\n    maxInvitationsPerDay: 50,\n    maxMessageLength: 500,\n    maxPhoneLength: 20,\n    // Add new security limits\n    maxConcurrentSessions: 5,\n    accessTokenExpiry: 3600,\n    maxFailedAttempts: 5,\n    lockoutDuration: 900,\n    minPasswordLength: 8\n};\n// Rate limiting storage\nconst invitationRateLimit = new Map();\n// Add session tracking\nconst activeSessions = new Map();\nconst failedAttempts = new Map();\nclass ContentSharingSecurity {\n    /**\n   * Enhanced phone number validation with international format support\n   */ static validatePhoneNumber(phone) {\n        if (!phone || typeof phone !== \"string\") {\n            return {\n                isValid: false,\n                error: \"Phone number is required\"\n            };\n        }\n        // Remove all non-digit characters except +\n        const cleaned = phone.replace(/[^\\d+]/g, \"\");\n        // Check length limits\n        if (cleaned.length > SECURITY_LIMITS.maxPhoneLength) {\n            return {\n                isValid: false,\n                error: \"Phone number too long\"\n            };\n        }\n        // Must start with + and have 10-15 digits\n        const phoneRegex = /^\\+[1-9]\\d{9,14}$/;\n        if (!phoneRegex.test(cleaned)) {\n            return {\n                isValid: false,\n                error: \"Invalid phone number format. Use +[country code][number]\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    /**\n   * Input sanitization for messages and text inputs\n   */ static sanitizeInput(input) {\n        if (!input || typeof input !== \"string\") return \"\";\n        return input.trim().replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\") // Remove scripts\n        .replace(/[<>'\"]/g, \"\") // Remove HTML/XML chars\n        .replace(/javascript:/gi, \"\") // Remove javascript: urls\n        .replace(/data:/gi, \"\") // Remove data: urls\n        .substring(0, SECURITY_LIMITS.maxMessageLength); // Limit length\n    }\n    /**\n   * Validate invitation message for suspicious content\n   */ static validateMessage(message) {\n        if (!message || message.trim() === \"\") return {\n            isValid: true\n        }; // Empty message is okay\n        const sanitized = this.sanitizeInput(message);\n        // Check for suspicious patterns\n        const suspiciousPatterns = [\n            /vbscript:/i,\n            /<iframe/i,\n            /<object/i,\n            /<embed/i,\n            /eval\\(/i,\n            /document\\./i,\n            /window\\./i\n        ];\n        if (suspiciousPatterns.some((pattern)=>pattern.test(sanitized))) {\n            return {\n                isValid: false,\n                error: \"Message contains suspicious content\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    /**\n   * Check rate limits for invitations\n   */ static checkInvitationRateLimit(userId) {\n        const now = Date.now();\n        const hourMs = 60 * 60 * 1000;\n        const dayMs = 24 * hourMs;\n        const userLimits = invitationRateLimit.get(userId) || {\n            count: 0,\n            lastReset: now,\n            dailyCount: 0,\n            dailyReset: now\n        };\n        // Reset hourly counter if needed\n        if (now - userLimits.lastReset > hourMs) {\n            userLimits.count = 0;\n            userLimits.lastReset = now;\n        }\n        // Reset daily counter if needed\n        if (now - userLimits.dailyReset > dayMs) {\n            userLimits.dailyCount = 0;\n            userLimits.dailyReset = now;\n        }\n        // Check limits\n        if (userLimits.count >= SECURITY_LIMITS.maxInvitationsPerHour) {\n            return {\n                allowed: false,\n                error: \"Too many invitations sent this hour. Please wait.\"\n            };\n        }\n        if (userLimits.dailyCount >= SECURITY_LIMITS.maxInvitationsPerDay) {\n            return {\n                allowed: false,\n                error: \"Daily invitation limit reached. Please try again tomorrow.\"\n            };\n        }\n        // Increment counters\n        userLimits.count++;\n        userLimits.dailyCount++;\n        invitationRateLimit.set(userId, userLimits);\n        return {\n            allowed: true\n        };\n    }\n    /**\n   * Check resource limits (max shares per user/content)\n   */ static async checkResourceLimits(userId, contentId) {\n        try {\n            const [userShares, contentShares] = await Promise.all([\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"assignedBy\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true))),\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentId\", \"==\", contentId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true)))\n            ]);\n            if (userShares.size >= SECURITY_LIMITS.maxSharesPerUser) {\n                return {\n                    allowed: false,\n                    error: \"Maximum shares per user exceeded\"\n                };\n            }\n            if (contentShares.size >= SECURITY_LIMITS.maxSharesPerContent) {\n                return {\n                    allowed: false,\n                    error: \"Maximum shares for this content exceeded\"\n                };\n            }\n            return {\n                allowed: true\n            };\n        } catch (error) {\n            console.error(\"Error checking resource limits:\", error);\n            return {\n                allowed: false,\n                error: \"Unable to verify resource limits\"\n            };\n        }\n    }\n    /**\n   * Enhanced permission validation\n   */ static validatePermissionChange(currentPermissions, newPermissions) {\n        // Only owners can grant admin permissions\n        if (newPermissions.role === \"admin\" && currentPermissions.role !== \"owner\") {\n            return {\n                isValid: false,\n                error: \"Only owners can grant admin permissions\"\n            };\n        }\n        // Only admins and owners can manage permissions\n        if (!currentPermissions.canManage && currentPermissions.role !== \"owner\") {\n            return {\n                isValid: false,\n                error: \"Insufficient permissions to manage access\"\n            };\n        }\n        // Prevent role escalation beyond current user's level\n        const roleHierarchy = {\n            viewer: 1,\n            editor: 2,\n            admin: 3,\n            owner: 4,\n            unauthorized: 0\n        };\n        const currentLevel = roleHierarchy[currentPermissions.role] || 0;\n        const newLevel = roleHierarchy[newPermissions.role] || 0;\n        if (newLevel > currentLevel) {\n            return {\n                isValid: false,\n                error: \"Cannot grant permissions higher than your own\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    /**\n   * Log security events for monitoring\n   */ static async logSecurityEvent(event) {\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"securityLogs\"), {\n                ...event,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n                userAgent: typeof navigator !== \"undefined\" ? navigator.userAgent : \"unknown\"\n            });\n        } catch (error) {\n            console.error(\"Failed to log security event:\", error);\n        }\n    }\n    /**\n   * Verify if a user has access to specific content\n   */ static async verifyContentAccess(contentType, contentId, userId) {\n        // Add brute force protection\n        if (!await this.validateAccessAttempt(userId)) {\n            await this.logSecurityEvent({\n                type: \"access_denied\",\n                userId,\n                contentType,\n                contentId,\n                details: {\n                    reason: \"Account temporarily locked due to too many failed attempts\"\n                }\n            });\n            return this.unauthorizedPermissions();\n        }\n        const currentUser = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.getAuth)().currentUser;\n        if (!currentUser || currentUser.uid !== userId) {\n            this.recordFailedAttempt(userId);\n            return this.unauthorizedPermissions();\n        }\n        try {\n            // First check if user is the owner\n            const isOwner = await this.checkContentOwnership(contentType, contentId, userId);\n            if (isOwner) {\n                return this.ownerPermissions();\n            }\n            // Check for shared access permissions\n            const sharedPermissions = await this.getSharedPermissions(contentType, contentId, userId);\n            if (sharedPermissions) {\n                return sharedPermissions;\n            }\n            this.recordFailedAttempt(userId);\n            return this.unauthorizedPermissions();\n        } catch (error) {\n            console.error(\"Error verifying content access:\", error);\n            this.recordFailedAttempt(userId);\n            return this.unauthorizedPermissions();\n        }\n    }\n    /**\n   * Share content with another user\n   */ static async shareContent(contentType, contentId, targetUserPhone, targetUserName, permissions, sharedByUserId, sharedByName, expiresInHours, message) {\n        try {\n            // 1. Validate phone number\n            const phoneValidation = this.validatePhoneNumber(targetUserPhone);\n            if (!phoneValidation.isValid) {\n                await this.logSecurityEvent({\n                    type: \"suspicious_activity\",\n                    userId: sharedByUserId,\n                    contentType,\n                    contentId,\n                    details: {\n                        reason: \"Invalid phone number\",\n                        phone: targetUserPhone\n                    }\n                });\n                return {\n                    success: false,\n                    error: phoneValidation.error\n                };\n            }\n            // 2. Validate message content\n            if (message) {\n                const messageValidation = this.validateMessage(message);\n                if (!messageValidation.isValid) {\n                    await this.logSecurityEvent({\n                        type: \"suspicious_activity\",\n                        userId: sharedByUserId,\n                        contentType,\n                        contentId,\n                        details: {\n                            reason: \"Suspicious message content\",\n                            message\n                        }\n                    });\n                    return {\n                        success: false,\n                        error: messageValidation.error\n                    };\n                }\n            }\n            // 3. Check rate limits\n            const rateLimitCheck = this.checkInvitationRateLimit(sharedByUserId);\n            if (!rateLimitCheck.allowed) {\n                return {\n                    success: false,\n                    error: rateLimitCheck.error\n                };\n            }\n            // 4. Check resource limits\n            const resourceCheck = await this.checkResourceLimits(sharedByUserId, contentId);\n            if (!resourceCheck.allowed) {\n                return {\n                    success: false,\n                    error: resourceCheck.error\n                };\n            }\n            // 5. Verify the sharer has permission to share - ONLY OWNERS CAN SHARE\n            const sharerPermissions = await this.verifyContentAccess(contentType, contentId, sharedByUserId);\n            // 🚨 ENHANCED: Only page owners can grant access to others\n            if (sharerPermissions.role !== \"owner\") {\n                await this.logSecurityEvent({\n                    type: \"access_denied\",\n                    userId: sharedByUserId,\n                    contentType,\n                    contentId,\n                    details: {\n                        reason: \"Only page owners can grant access to others\",\n                        userRole: sharerPermissions.role,\n                        requiredRole: \"owner\"\n                    }\n                });\n                return {\n                    success: false,\n                    error: \"Only page owners can grant access to others. You have \" + sharerPermissions.role + \" access.\"\n                };\n            }\n            // 6. Validate permission level\n            const permissionValidation = this.validatePermissionChange(sharerPermissions, permissions);\n            if (!permissionValidation.isValid) {\n                return {\n                    success: false,\n                    error: permissionValidation.error\n                };\n            }\n            // 7. Sanitize inputs\n            const sanitizedMessage = message ? this.sanitizeInput(message) : \"\";\n            const sanitizedTargetName = this.sanitizeInput(targetUserName);\n            const sanitizedPhone = targetUserPhone.replace(/[^\\d+]/g, \"\"); // Clean phone number\n            // 8. Check if target user exists\n            const targetUser = await this.findUserByPhone(sanitizedPhone);\n            const expiresAt = expiresInHours ? new Date(Date.now() + expiresInHours * 60 * 60 * 1000).toISOString() : undefined;\n            if (targetUser) {\n                // User exists, create direct assignment\n                const assignment = {\n                    contentType,\n                    contentId,\n                    userId: targetUser.uid,\n                    userPhone: sanitizedPhone,\n                    userName: sanitizedTargetName || targetUser.name || \"Editor\",\n                    permissions,\n                    assignedBy: sharedByUserId,\n                    assignedByName: sharedByName,\n                    assignedAt: new Date().toISOString(),\n                    expiresAt,\n                    isActive: true,\n                    status: \"active\",\n                    notes: sanitizedMessage,\n                    invitationMessage: sanitizedMessage\n                };\n                // Check if user already has access\n                const existingQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentType\", \"==\", contentType), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentId\", \"==\", contentId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", targetUser.uid), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true));\n                const existingSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(existingQuery);\n                if (!existingSnapshot.empty) {\n                    // Update existing assignment\n                    const existingDoc = existingSnapshot.docs[0];\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(existingDoc.ref, {\n                        permissions,\n                        assignedBy: sharedByUserId,\n                        assignedByName: sharedByName,\n                        assignedAt: assignment.assignedAt,\n                        expiresAt,\n                        notes: sanitizedMessage,\n                        updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                    });\n                    await this.logSecurityEvent({\n                        type: \"permission_change\",\n                        userId: sharedByUserId,\n                        contentType,\n                        contentId,\n                        details: {\n                            targetUserId: targetUser.uid,\n                            newRole: permissions.role,\n                            action: \"updated\"\n                        }\n                    });\n                    return {\n                        success: true,\n                        assignmentId: existingDoc.id\n                    };\n                } else {\n                    // Create new assignment\n                    const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), {\n                        ...assignment,\n                        createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                    });\n                    await this.logSecurityEvent({\n                        type: \"access_granted\",\n                        userId: sharedByUserId,\n                        contentType,\n                        contentId,\n                        details: {\n                            targetUserId: targetUser.uid,\n                            role: permissions.role,\n                            action: \"created\"\n                        }\n                    });\n                    return {\n                        success: true,\n                        assignmentId: docRef.id\n                    };\n                }\n            } else {\n                // User doesn't exist, create invitation\n                const contentName = await this.getContentName(contentType, contentId);\n                const invitation = {\n                    contentType,\n                    contentId,\n                    contentName,\n                    invitedPhone: sanitizedPhone,\n                    invitedByUserId: sharedByUserId,\n                    invitedByName: sharedByName,\n                    permissions,\n                    message: sanitizedMessage,\n                    status: \"pending\",\n                    createdAt: new Date().toISOString(),\n                    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days\n                };\n                const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentInvitations\"), {\n                    ...invitation,\n                    createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                });\n                await this.logSecurityEvent({\n                    type: \"access_granted\",\n                    userId: sharedByUserId,\n                    contentType,\n                    contentId,\n                    details: {\n                        invitedPhone: sanitizedPhone,\n                        role: permissions.role,\n                        action: \"invitation_created\"\n                    }\n                });\n                return {\n                    success: true,\n                    invitationId: docRef.id\n                };\n            }\n        } catch (error) {\n            console.error(\"Error sharing content:\", error);\n            return {\n                success: false,\n                error: \"Failed to share content\"\n            };\n        }\n    }\n    /**\n   * Remove shared access\n   */ static async removeSharedAccess(contentType, contentId, targetUserId, removedByUserId) {\n        try {\n            // Verify remover has permission\n            const removerPermissions = await this.verifyContentAccess(contentType, contentId, removedByUserId);\n            if (!removerPermissions.canManage && removerPermissions.role !== \"owner\") {\n                return {\n                    success: false,\n                    error: \"You do not have permission to remove access\"\n                };\n            }\n            // Find and remove the assignment\n            const assignmentQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentType\", \"==\", contentType), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentId\", \"==\", contentId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", targetUserId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(assignmentQuery);\n            if (snapshot.empty) {\n                return {\n                    success: false,\n                    error: \"No shared access found for this user\"\n                };\n            }\n            const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)());\n            snapshot.docs.forEach((doc)=>{\n                batch.update(doc.ref, {\n                    isActive: false,\n                    removedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n                    removedBy: removedByUserId\n                });\n            });\n            await batch.commit();\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error removing shared access:\", error);\n            return {\n                success: false,\n                error: \"Failed to remove shared access\"\n            };\n        }\n    }\n    /**\n   * Get all users who have access to content\n   */ static async getContentCollaborators(contentType, contentId) {\n        try {\n            const collaboratorsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentType\", \"==\", contentType), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentId\", \"==\", contentId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(collaboratorsQuery);\n            const assignments = snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            // Deduplicate by userId - keep only the most recent assignment for each user\n            const userAssignmentMap = new Map();\n            for (const assignment of assignments){\n                // Skip expired assignments\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    continue;\n                }\n                const existingAssignment = userAssignmentMap.get(assignment.userId);\n                if (!existingAssignment || new Date(assignment.assignedAt) > new Date(existingAssignment.assignedAt)) {\n                    userAssignmentMap.set(assignment.userId, assignment);\n                }\n            }\n            return Array.from(userAssignmentMap.values());\n        } catch (error) {\n            console.error(\"Error fetching content collaborators:\", error);\n            return [];\n        }\n    }\n    /**\n   * Get shared content for a user (content they have access to but don't own)\n   */ static async getUserSharedContent(userId) {\n        try {\n            const sharedQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(sharedQuery);\n            const sharedContent = {\n                artists: [],\n                organizations: [],\n                venues: [],\n                events: [],\n                activities: []\n            };\n            // Use Set to track already processed content to prevent duplicates\n            const processedContent = new Set();\n            for (const docSnap of snapshot.docs){\n                const assignment = docSnap.data();\n                // Check if assignment has expired\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    continue;\n                }\n                // Create unique key for deduplication\n                const contentKey = \"\".concat(assignment.contentType, \"-\").concat(assignment.contentId);\n                // Skip if already processed to prevent duplicates\n                if (processedContent.has(contentKey)) {\n                    continue;\n                }\n                processedContent.add(contentKey);\n                // Get the content name\n                const contentName = await this.getContentName(assignment.contentType, assignment.contentId);\n                const sharedItem = {\n                    uid: assignment.contentId,\n                    name: contentName,\n                    role: assignment.permissions.role\n                };\n                switch(assignment.contentType){\n                    case \"artist\":\n                        sharedContent.artists.push(sharedItem);\n                        break;\n                    case \"organization\":\n                        sharedContent.organizations.push(sharedItem);\n                        break;\n                    case \"venue\":\n                        sharedContent.venues.push(sharedItem);\n                        break;\n                    case \"event\":\n                        sharedContent.events.push(sharedItem);\n                        break;\n                    case \"activity\":\n                        sharedContent.activities.push(sharedItem);\n                        break;\n                }\n            }\n            return sharedContent;\n        } catch (error) {\n            console.error(\"Error fetching shared content:\", error);\n            return {\n                artists: [],\n                organizations: [],\n                venues: [],\n                events: [],\n                activities: []\n            };\n        }\n    }\n    /**\n   * Get pending invitations for a user\n   */ static async getUserPendingInvitations(userPhone) {\n        try {\n            const invitationsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentInvitations\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"invitedPhone\", \"==\", userPhone), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"status\", \"==\", \"pending\"));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(invitationsQuery);\n            return snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n        } catch (error) {\n            console.error(\"Error fetching pending invitations:\", error);\n            return [];\n        }\n    }\n    /**\n   * Accept an invitation\n   */ static async acceptInvitation(invitationId, userId, userName) {\n        try {\n            const invitationDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentInvitations\", invitationId));\n            if (!invitationDoc.exists()) {\n                return {\n                    success: false,\n                    error: \"Invitation not found\"\n                };\n            }\n            const invitation = invitationDoc.data();\n            // Check if invitation is still valid\n            if (invitation.status !== \"pending\" || new Date(invitation.expiresAt) < new Date()) {\n                return {\n                    success: false,\n                    error: \"Invitation has expired or already been responded to\"\n                };\n            }\n            // Create content sharing assignment\n            const assignment = {\n                contentType: invitation.contentType,\n                contentId: invitation.contentId,\n                userId,\n                userPhone: invitation.invitedPhone,\n                userName,\n                permissions: invitation.permissions,\n                assignedBy: invitation.invitedByUserId,\n                assignedByName: invitation.invitedByName,\n                assignedAt: new Date().toISOString(),\n                isActive: true,\n                status: \"active\",\n                notes: \"Accepted invitation: \".concat(invitation.message || \"\"),\n                invitationMessage: invitation.message || \"\"\n            };\n            // Use batch to update invitation and create assignment\n            const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)());\n            // Update invitation status\n            batch.update((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentInvitations\", invitationId), {\n                status: \"accepted\",\n                respondedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n                invitedUserId: userId\n            });\n            // Create sharing assignment\n            const assignmentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"));\n            batch.set(assignmentRef, {\n                ...assignment,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n            await batch.commit();\n            await this.logContentSecurityEvent({\n                type: \"invitation_response\",\n                userId,\n                contentType: invitation.contentType,\n                contentId: invitation.contentId,\n                action: \"invitation_accepted\",\n                result: \"success\",\n                details: {\n                    invitationId,\n                    role: invitation.permissions.role\n                }\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error accepting invitation:\", error);\n            return {\n                success: false,\n                error: \"Failed to accept invitation\"\n            };\n        }\n    }\n    /**\n   * Decline an invitation\n   */ static async declineInvitation(invitationId) {\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentInvitations\", invitationId), {\n                status: \"declined\",\n                respondedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error declining invitation:\", error);\n            return {\n                success: false,\n                error: \"Failed to decline invitation\"\n            };\n        }\n    }\n    /**\n   * Permission templates for different roles\n   */ static getPermissionTemplates() {\n        return {\n            viewer: {\n                canView: true,\n                canEdit: false,\n                canManage: false,\n                canInviteOthers: false,\n                canViewAnalytics: false,\n                canDelete: false,\n                role: \"viewer\"\n            },\n            editor: {\n                canView: true,\n                canEdit: true,\n                canManage: false,\n                canInviteOthers: false,\n                canViewAnalytics: true,\n                canDelete: false,\n                role: \"editor\"\n            },\n            admin: {\n                canView: true,\n                canEdit: true,\n                canManage: true,\n                canInviteOthers: true,\n                canViewAnalytics: true,\n                canDelete: false,\n                role: \"admin\"\n            }\n        };\n    }\n    // Private helper methods\n    static async checkContentOwnership(contentType, contentId, userId) {\n        try {\n            let collectionName = \"\";\n            let ownerField = \"ownerId\";\n            switch(contentType){\n                case \"artist\":\n                    collectionName = \"Artists\";\n                    break;\n                case \"organization\":\n                    collectionName = \"Organisations\";\n                    break;\n                case \"venue\":\n                    collectionName = \"Venues\";\n                    break;\n                case \"event\":\n                    collectionName = \"events\";\n                    ownerField = \"organizationId\";\n                    break;\n                case \"activity\":\n                    collectionName = \"activities\";\n                    ownerField = \"organizationId\";\n                    break;\n            }\n            const contentDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), collectionName, contentId));\n            if (!contentDoc.exists()) return false;\n            const contentData = contentDoc.data();\n            // For events, check both organizationId and creator.userId\n            if (contentType === \"event\") {\n                return contentData.organizationId === userId || contentData.creator && contentData.creator.userId === userId;\n            }\n            return contentData[ownerField] === userId;\n        } catch (error) {\n            console.error(\"Error checking content ownership:\", error);\n            return false;\n        }\n    }\n    static async getSharedPermissions(contentType, contentId, userId) {\n        try {\n            const sharingQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"contentSharing\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentType\", \"==\", contentType), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"contentId\", \"==\", contentId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(sharingQuery);\n            if (snapshot.empty) return null;\n            const assignment = snapshot.docs[0].data();\n            // Check if assignment has expired\n            if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                // Mark as expired\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(snapshot.docs[0].ref, {\n                    isActive: false,\n                    status: \"expired\"\n                });\n                return null;\n            }\n            return assignment.permissions;\n        } catch (error) {\n            console.error(\"Error getting shared permissions:\", error);\n            return null;\n        }\n    }\n    static async findUserByPhone(phone) {\n        try {\n            const usersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"Users\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"phoneNumber\", \"==\", phone));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(usersQuery);\n            if (snapshot.empty) return null;\n            const userData = snapshot.docs[0].data();\n            return {\n                uid: snapshot.docs[0].id,\n                name: userData.name || userData.displayName || \"Unknown User\"\n            };\n        } catch (error) {\n            console.error(\"Error finding user by phone:\", error);\n            return null;\n        }\n    }\n    static async getContentName(contentType, contentId) {\n        try {\n            let collectionName = \"\";\n            let nameField = \"name\";\n            switch(contentType){\n                case \"artist\":\n                    collectionName = \"Artists\";\n                    break;\n                case \"organization\":\n                    collectionName = \"Organisations\";\n                    break;\n                case \"venue\":\n                    collectionName = \"Venues\";\n                    break;\n                case \"event\":\n                    collectionName = \"events\";\n                    nameField = \"title\";\n                    break;\n                case \"activity\":\n                    collectionName = \"activities\";\n                    nameField = \"title\";\n                    break;\n            }\n            const contentDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), collectionName, contentId));\n            if (contentDoc.exists()) {\n                const data = contentDoc.data();\n                return data[nameField] || \"\".concat(contentType, \" \").concat(contentId);\n            }\n            return \"\".concat(contentType, \" \").concat(contentId);\n        } catch (error) {\n            console.error(\"Error getting content name:\", error);\n            return \"\".concat(contentType, \" \").concat(contentId);\n        }\n    }\n    static async logContentSecurityEvent(event) {\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_0__.db)(), \"securityEvents\"), {\n                ...event,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n                source: \"content_sharing_security\"\n            });\n        } catch (error) {\n            console.error(\"Error logging security event:\", error);\n        }\n    }\n    static ownerPermissions() {\n        return {\n            canView: true,\n            canEdit: true,\n            canManage: true,\n            canInviteOthers: true,\n            canViewAnalytics: true,\n            canDelete: true,\n            role: \"owner\"\n        };\n    }\n    static unauthorizedPermissions() {\n        return {\n            canView: false,\n            canEdit: false,\n            canManage: false,\n            canInviteOthers: false,\n            canViewAnalytics: false,\n            canDelete: false,\n            role: \"unauthorized\"\n        };\n    }\n    /**\n   * Track and limit concurrent sessions\n   */ static async trackSession(userId, sessionId) {\n        if (!activeSessions.has(userId)) {\n            activeSessions.set(userId, new Set());\n        }\n        const userSessions = activeSessions.get(userId);\n        if (userSessions.size >= SECURITY_LIMITS.maxConcurrentSessions) {\n            await this.logSecurityEvent({\n                type: \"session_limit_exceeded\",\n                userId,\n                contentType: \"system\",\n                contentId: \"global\",\n                details: {\n                    sessionId,\n                    activeCount: userSessions.size\n                }\n            });\n            return false;\n        }\n        userSessions.add(sessionId);\n        return true;\n    }\n    /**\n   * Enhanced permission validation with brute force protection\n   */ static async validateAccessAttempt(userId) {\n        if (!failedAttempts.has(userId)) {\n            failedAttempts.set(userId, {\n                count: 0,\n                lastAttempt: Date.now()\n            });\n            return true;\n        }\n        const attempts = failedAttempts.get(userId);\n        const now = Date.now();\n        // Reset if lockout duration has passed\n        if (now - attempts.lastAttempt > SECURITY_LIMITS.lockoutDuration * 1000) {\n            failedAttempts.set(userId, {\n                count: 0,\n                lastAttempt: now\n            });\n            return true;\n        }\n        if (attempts.count >= SECURITY_LIMITS.maxFailedAttempts) {\n            await this.logSecurityEvent({\n                type: \"account_lockout\",\n                userId,\n                contentType: \"system\",\n                contentId: \"global\",\n                details: {\n                    failedAttempts: attempts.count\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Record failed access attempt\n   */ static recordFailedAttempt(userId) {\n        const attempts = failedAttempts.get(userId) || {\n            count: 0,\n            lastAttempt: Date.now()\n        };\n        attempts.count++;\n        attempts.lastAttempt = Date.now();\n        failedAttempts.set(userId, attempts);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/utils/security/contentSharingSecurity.ts\n"));

/***/ })

}]);
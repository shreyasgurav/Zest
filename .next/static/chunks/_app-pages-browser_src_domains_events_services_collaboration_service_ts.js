"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_domains_events_services_collaboration_service_ts"],{

/***/ "(app-pages-browser)/./src/domains/events/services/collaboration.service.ts":
/*!**************************************************************!*\
  !*** ./src/domains/events/services/collaboration.service.ts ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventCollaborationSecurity: function() { return /* binding */ EventCollaborationSecurity; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/infrastructure/firebase */ \"(app-pages-browser)/./src/infrastructure/firebase/index.ts\");\n/* __next_internal_client_entry_do_not_use__ EventCollaborationSecurity auto */ \n\nclass EventCollaborationSecurity {\n    /**\n   * Enhanced input validation with multiple layers of security\n   */ static validateUsername(username) {\n        if (!username || typeof username !== \"string\") {\n            return {\n                isValid: false,\n                error: \"Username is required\"\n            };\n        }\n        const trimmed = username.trim();\n        if (trimmed.length < 3) {\n            return {\n                isValid: false,\n                error: \"Username must be at least 3 characters\"\n            };\n        }\n        if (trimmed.length > 30) {\n            return {\n                isValid: false,\n                error: \"Username must be less than 30 characters\"\n            };\n        }\n        // More restrictive regex for usernames\n        const usernameRegex = /^[a-zA-Z0-9_.-]+$/;\n        if (!usernameRegex.test(trimmed)) {\n            return {\n                isValid: false,\n                error: \"Username can only contain letters, numbers, underscores, dots, and hyphens\"\n            };\n        }\n        // Security: Check for suspicious patterns\n        const suspiciousPatterns = [\n            /admin/i,\n            /root/i,\n            /system/i,\n            /api/i,\n            /null/i,\n            /undefined/i,\n            /script/i,\n            /javascript/i,\n            /eval/i,\n            /alert/i\n        ];\n        if (suspiciousPatterns.some((pattern)=>pattern.test(trimmed))) {\n            return {\n                isValid: false,\n                error: \"Username contains restricted words\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    static validatePhoneNumber(phone) {\n        if (!phone || typeof phone !== \"string\") {\n            return {\n                isValid: false,\n                error: \"Phone number is required\"\n            };\n        }\n        // Remove all non-digit characters except +\n        const cleanPhone = phone.replace(/[^\\d+]/g, \"\");\n        if (!cleanPhone.startsWith(\"+\")) {\n            return {\n                isValid: false,\n                error: \"Phone number must start with country code (+)\"\n            };\n        }\n        if (cleanPhone.length < 10 || cleanPhone.length > 15) {\n            return {\n                isValid: false,\n                error: \"Phone number must be 10-15 digits including country code\"\n            };\n        }\n        // International phone number regex\n        const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n        if (!phoneRegex.test(cleanPhone)) {\n            return {\n                isValid: false,\n                error: \"Invalid phone number format\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    static sanitizeInput(input) {\n        if (!input || typeof input !== \"string\") return \"\";\n        return input.trim().replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\") // Remove scripts\n        .replace(/<[^>]*>/g, \"\") // Remove HTML tags\n        .replace(/javascript:/gi, \"\") // Remove javascript: URLs\n        .replace(/on\\w+\\s*=/gi, \"\") // Remove event handlers\n        .substring(0, 500); // Limit length\n    }\n    static validateMessage(message) {\n        if (!message) return {\n            isValid: true\n        }; // Message is optional\n        if (message.length > 500) {\n            return {\n                isValid: false,\n                error: \"Message must be less than 500 characters\"\n            };\n        }\n        // Check for suspicious content\n        const suspiciousPatterns = [\n            /<script/i,\n            /javascript:/i,\n            /on\\w+\\s*=/i,\n            /eval\\(/i,\n            /alert\\(/i\n        ];\n        if (suspiciousPatterns.some((pattern)=>pattern.test(message))) {\n            return {\n                isValid: false,\n                error: \"Message contains potentially harmful content\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    static checkInvitationRateLimit(userId) {\n        const now = Date.now();\n        const hourMs = 60 * 60 * 1000;\n        const dailyMs = 24 * hourMs;\n        // Clean up old entries - Fix TypeScript iterator issue\n        const entriesToDelete = [];\n        this.invitationCounts.forEach((data, key)=>{\n            if (now > data.resetTime) {\n                entriesToDelete.push(key);\n            }\n        });\n        entriesToDelete.forEach((key)=>this.invitationCounts.delete(key));\n        // Check hourly limit (15 invitations per hour)\n        const hourlyKey = \"\".concat(userId, \"_hourly\");\n        const hourlyData = this.invitationCounts.get(hourlyKey);\n        if (hourlyData && hourlyData.count >= 15) {\n            return {\n                allowed: false,\n                error: \"Rate limit exceeded. You can send up to 15 invitations per hour.\"\n            };\n        }\n        // Check daily limit (100 invitations per day)\n        const dailyKey = \"\".concat(userId, \"_daily\");\n        const dailyData = this.invitationCounts.get(dailyKey);\n        if (dailyData && dailyData.count >= 100) {\n            return {\n                allowed: false,\n                error: \"Daily limit exceeded. You can send up to 100 invitations per day.\"\n            };\n        }\n        // Update counters\n        this.invitationCounts.set(hourlyKey, {\n            count: ((hourlyData === null || hourlyData === void 0 ? void 0 : hourlyData.count) || 0) + 1,\n            resetTime: (hourlyData === null || hourlyData === void 0 ? void 0 : hourlyData.resetTime) || now + hourMs\n        });\n        this.invitationCounts.set(dailyKey, {\n            count: ((dailyData === null || dailyData === void 0 ? void 0 : dailyData.count) || 0) + 1,\n            resetTime: (dailyData === null || dailyData === void 0 ? void 0 : dailyData.resetTime) || now + dailyMs\n        });\n        return {\n            allowed: true\n        };\n    }\n    /**\n   * Resource limits to prevent abuse\n   */ static async checkResourceLimits(eventId, inviterId) {\n        try {\n            // Check maximum collaborators per event (50)\n            const collaboratorsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(collaboratorsQuery);\n            if (snapshot.size >= 50) {\n                return {\n                    allowed: false,\n                    error: \"Maximum collaborators limit reached (50 per event)\"\n                };\n            }\n            // Check maximum events shared by user (500)\n            const userEventsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"assignedBy\", \"==\", inviterId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n            const userSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(userEventsQuery);\n            if (userSnapshot.size >= 500) {\n                return {\n                    allowed: false,\n                    error: \"You have reached the maximum limit of shared events (500)\"\n                };\n            }\n            return {\n                allowed: true\n            };\n        } catch (error) {\n            console.error(\"Error checking resource limits:\", error);\n            return {\n                allowed: false,\n                error: \"Failed to verify resource limits\"\n            };\n        }\n    }\n    /**\n   * Permission templates for different access levels\n   */ static getPermissionTemplates() {\n        return {\n            full_management: {\n                canView: true,\n                canCheckIn: true,\n                canManageAttendees: true,\n                canViewFinancials: true,\n                canEditEvent: true,\n                canViewReports: true,\n                canSendCommunications: true,\n                role: \"full_manager\"\n            },\n            checkin_only: {\n                canView: true,\n                canCheckIn: true,\n                canManageAttendees: false,\n                canViewFinancials: false,\n                canEditEvent: false,\n                canViewReports: false,\n                canSendCommunications: false,\n                role: \"checkin_staff\"\n            }\n        };\n    }\n    /**\n   * Find page by username across all page types\n   */ static async findPageByUsername(username) {\n        try {\n            const normalizedUsername = username.toLowerCase().trim();\n            // Search all page collections\n            const [artistsQuery, organizationsQuery, venuesQuery] = await Promise.all([\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"Artists\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"username\", \"==\", normalizedUsername))),\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"Organisations\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"username\", \"==\", normalizedUsername))),\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"Venues\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"username\", \"==\", normalizedUsername)))\n            ]);\n            if (!artistsQuery.empty) {\n                const doc = artistsQuery.docs[0];\n                const data = doc.data();\n                return {\n                    found: true,\n                    pageType: \"artist\",\n                    pageId: doc.id,\n                    pageName: data.name,\n                    ownerId: data.ownerId\n                };\n            }\n            if (!organizationsQuery.empty) {\n                const doc = organizationsQuery.docs[0];\n                const data = doc.data();\n                return {\n                    found: true,\n                    pageType: \"organization\",\n                    pageId: doc.id,\n                    pageName: data.name,\n                    ownerId: data.ownerId\n                };\n            }\n            if (!venuesQuery.empty) {\n                const doc = venuesQuery.docs[0];\n                const data = doc.data();\n                return {\n                    found: true,\n                    pageType: \"venue\",\n                    pageId: doc.id,\n                    pageName: data.name,\n                    ownerId: data.ownerId\n                };\n            }\n            return {\n                found: false,\n                error: \"Page not found with this username\"\n            };\n        } catch (error) {\n            console.error(\"Error finding page by username:\", error);\n            return {\n                found: false,\n                error: \"Failed to search for page\"\n            };\n        }\n    }\n    /**\n   * Find user by phone number\n   */ static async findUserByPhone(phone) {\n        try {\n            console.log('\\uD83D\\uDD0D Searching for user with phone: \"'.concat(phone, '\"'));\n            // 🚨 DEBUG: Let's also search for a broader range of phone formats\n            const phoneVariations = [\n                phone,\n                phone.replace(/\\s/g, \"\"),\n                phone.replace(/[^\\d+]/g, \"\")\n            ];\n            // Add common Indian variations\n            if (phone.startsWith(\"+91\")) {\n                phoneVariations.push(phone.substring(3)); // Without +91\n                phoneVariations.push(\"91\" + phone.substring(3)); // With 91 prefix\n            }\n            console.log(\"\\uD83D\\uDD0D Searching phone variations:\", phoneVariations);\n            // 🚨 FIX: Search for both possible phone field names\n            // Users might have phone stored as 'phone' or 'phoneNumber'\n            const usersQueryByPhone = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"Users\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"phone\", \"==\", phone));\n            const usersQueryByPhoneNumber = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"Users\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"phoneNumber\", \"==\", phone));\n            console.log(\"\\uD83D\\uDD0D Executing parallel queries for phone fields...\");\n            const [phoneSnapshot, phoneNumberSnapshot] = await Promise.all([\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(usersQueryByPhone),\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(usersQueryByPhoneNumber)\n            ]);\n            let userData = null;\n            let userId = null;\n            let foundField = null;\n            if (!phoneSnapshot.empty) {\n                console.log(\"✅ Found user by 'phone' field\");\n                userData = phoneSnapshot.docs[0].data();\n                userId = phoneSnapshot.docs[0].id;\n                foundField = \"phone\";\n            } else if (!phoneNumberSnapshot.empty) {\n                console.log(\"✅ Found user by 'phoneNumber' field\");\n                userData = phoneNumberSnapshot.docs[0].data();\n                userId = phoneNumberSnapshot.docs[0].id;\n                foundField = \"phoneNumber\";\n            } else {\n                console.log(\"❌ No user found with exact phone: \".concat(phone));\n                // 🚨 DEBUG: Let's check what phone numbers actually exist in the database\n                console.log(\"\\uD83D\\uDD0D Checking what phone numbers exist for debugging...\");\n                const allUsersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"Users\"));\n                const allUsersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(allUsersQuery);\n                console.log(\"\\uD83D\\uDD0D Found \".concat(allUsersSnapshot.size, \" total users in database\"));\n                allUsersSnapshot.docs.forEach((doc, index)=>{\n                    const data = doc.data();\n                    if (index < 5) {\n                        console.log(\"\\uD83D\\uDD0D User \".concat(index + 1, \":\"), {\n                            id: doc.id,\n                            phone: data.phone,\n                            phoneNumber: data.phoneNumber,\n                            name: data.name\n                        });\n                    }\n                });\n                return null;\n            }\n            const result = {\n                uid: userId,\n                name: userData.name || userData.displayName || \"Unknown User\"\n            };\n            console.log(\"✅ User found via '\".concat(foundField, \"' field:\"), result);\n            console.log(\"\\uD83D\\uDD0D User's stored phone data:\", {\n                phone: userData.phone,\n                phoneNumber: userData.phoneNumber\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error finding user by phone:\", error);\n            return null;\n        }\n    }\n    /**\n   * Verify if user has OWNER-level access to event (for granting access to others)\n   */ static async verifyEventOwnershipAccess(eventId, userId) {\n        try {\n            const eventDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"events\", eventId));\n            if (!eventDoc.exists()) return false;\n            const eventData = eventDoc.data();\n            // Check if user is direct event owner\n            if (eventData.organizationId === userId) return true;\n            if (eventData.creator && eventData.creator.userId === userId) return true;\n            // Check if user is OWNER of the page that created this event\n            if (eventData.creator && eventData.creator.contentType && eventData.creator.contentId) {\n                const { contentType, contentId } = eventData.creator;\n                // Import ContentSharingSecurity locally to avoid circular dependency\n                const { ContentSharingSecurity } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_shared_utils_security_contentSharingSecurity_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/shared/utils/security/contentSharingSecurity */ \"(app-pages-browser)/./src/shared/utils/security/contentSharingSecurity.ts\"));\n                const permissions = await ContentSharingSecurity.verifyContentAccess(contentType, contentId, userId);\n                // Only owners of the creating page can grant access\n                return permissions.role === \"owner\";\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Error verifying event ownership access:\", error);\n            return false;\n        }\n    }\n    /**\n   * Verify if user can manage event collaboration\n   */ static async verifyEventManagementAccess(eventId, userId) {\n        try {\n            const eventDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"events\", eventId));\n            if (!eventDoc.exists()) return false;\n            const eventData = eventDoc.data();\n            // Check if user is event owner\n            if (eventData.organizationId === userId) return true;\n            if (eventData.creator && eventData.creator.userId === userId) return true;\n            // Check if user has full management access through collaboration\n            const collaborationQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(collaborationQuery);\n            for (const docSnap of snapshot.docs){\n                const assignment = docSnap.data();\n                // Check if expired\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    continue;\n                }\n                // Check if this assignment gives the user management access\n                if (assignment.collaboratorType === \"page\" && assignment.pageOwnerId === userId) {\n                    return assignment.accessLevel === \"full_management\";\n                } else if (assignment.collaboratorType === \"user\" && assignment.userId === userId) {\n                    return assignment.accessLevel === \"full_management\";\n                }\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Error verifying event management access:\", error);\n            return false;\n        }\n    }\n    /**\n   * Share session with page or user\n   */ static async shareSession(eventId, sessionId, sessionName, collaboratorType, collaboratorIdentifier, accessLevel, inviterId, inviterName, expiresInHours, message) {\n        let showOnEventPage = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : false;\n        try {\n            // 🚨 ENHANCED: Verify inviter has OWNER-level management access (not just management access)\n            const hasAccess = await this.verifyEventOwnershipAccess(eventId, inviterId);\n            if (!hasAccess) {\n                return {\n                    success: false,\n                    error: \"Only event owners can grant check-in access to others\"\n                };\n            }\n            // Rate limiting\n            const rateLimitCheck = this.checkInvitationRateLimit(inviterId);\n            if (!rateLimitCheck.allowed) {\n                return {\n                    success: false,\n                    error: rateLimitCheck.error\n                };\n            }\n            // Resource limits\n            const resourceCheck = await this.checkResourceLimits(eventId, inviterId);\n            if (!resourceCheck.allowed) {\n                return {\n                    success: false,\n                    error: resourceCheck.error\n                };\n            }\n            // Get event data\n            const eventDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"events\", eventId));\n            if (!eventDoc.exists()) {\n                return {\n                    success: false,\n                    error: \"Event not found\"\n                };\n            }\n            const eventData = eventDoc.data();\n            const eventTitle = eventData.title || \"Untitled Event\";\n            const sanitizedMessage = this.sanitizeInput(message || \"\");\n            const permissions = this.getPermissionTemplates()[accessLevel];\n            if (collaboratorType === \"page\") {\n                // Validate username\n                const usernameValidation = this.validateUsername(collaboratorIdentifier);\n                if (!usernameValidation.isValid) {\n                    return {\n                        success: false,\n                        error: usernameValidation.error\n                    };\n                }\n                // Find page\n                const pageResult = await this.findPageByUsername(collaboratorIdentifier);\n                if (!pageResult.found) {\n                    return {\n                        success: false,\n                        error: pageResult.error\n                    };\n                }\n                // Check for existing assignments and invitations for this page\n                const existingAssignmentQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"pageId\", \"==\", pageResult.pageId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n                const existingInvitationQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"pageId\", \"==\", pageResult.pageId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"pending\"));\n                const [existingSnapshot, invitationSnapshot] = await Promise.all([\n                    (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(existingAssignmentQuery),\n                    (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(existingInvitationQuery)\n                ]);\n                if (!existingSnapshot.empty) {\n                    return {\n                        success: false,\n                        error: \"This page already has access to the event\"\n                    };\n                }\n                if (!invitationSnapshot.empty) {\n                    console.log(\"\\uD83D\\uDD0D Found existing invitation. Debug info:\");\n                    const existingInvitation = invitationSnapshot.docs[0].data();\n                    console.log(\"\\uD83D\\uDD0D Existing invitation:\", {\n                        phone: existingInvitation.invitedPhone,\n                        status: existingInvitation.status,\n                        createdAt: existingInvitation.createdAt,\n                        eventTitle: existingInvitation.eventTitle\n                    });\n                    // 🚨 DEBUG: Let's still run the user search to see why it failed\n                    console.log(\"\\uD83D\\uDD0D Running user search debug even though invitation exists...\");\n                    const debugUserSearch = await this.findUserByPhone(collaboratorIdentifier);\n                    console.log(\"\\uD83D\\uDD0D Debug user search result:\", debugUserSearch);\n                    return {\n                        success: false,\n                        error: \"This page already has a pending invitation for this event\"\n                    };\n                }\n                // Create invitation for page\n                const invitation = {\n                    eventId,\n                    eventTitle,\n                    sessionId,\n                    sessionName,\n                    collaboratorType: \"page\",\n                    pageType: pageResult.pageType,\n                    pageUsername: collaboratorIdentifier,\n                    pageId: pageResult.pageId,\n                    pageName: pageResult.pageName,\n                    invitedByUserId: inviterId,\n                    invitedByName: inviterName,\n                    accessLevel,\n                    permissions,\n                    message: sanitizedMessage,\n                    status: \"pending\",\n                    createdAt: new Date().toISOString(),\n                    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n                    showOnEventPage\n                };\n                const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\"), {\n                    ...invitation,\n                    createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n                });\n                await this.logSecurityEvent({\n                    type: \"event_collaboration\",\n                    userId: inviterId,\n                    eventId,\n                    action: \"page_invitation_sent\",\n                    result: \"success\",\n                    details: {\n                        pageId: pageResult.pageId,\n                        pageType: pageResult.pageType,\n                        accessLevel,\n                        showOnEventPage\n                    }\n                });\n                return {\n                    success: true,\n                    invitationId: docRef.id\n                };\n            } else {\n                // 🚨 FIX: Direct assignment for user collaborators - no invitation needed\n                const phoneValidation = this.validatePhoneNumber(collaboratorIdentifier);\n                if (!phoneValidation.isValid) {\n                    return {\n                        success: false,\n                        error: phoneValidation.error\n                    };\n                }\n                const sanitizedPhone = phoneValidation.isValid ? collaboratorIdentifier.replace(/[^\\d+]/g, \"\") : \"\";\n                // Only allow checkin_only access for user collaborators (security measure)\n                if (accessLevel !== \"checkin_only\") {\n                    return {\n                        success: false,\n                        error: \"User collaborators can only have check-in access\"\n                    };\n                }\n                // Check if user is already registered\n                console.log(\"\\uD83D\\uDD0D Looking for existing user with phone: \".concat(sanitizedPhone));\n                const existingUser = await this.findUserByPhone(sanitizedPhone);\n                console.log(\"\\uD83D\\uDD0D findUserByPhone result:\", existingUser);\n                if (existingUser) {\n                    console.log(\"✅ User found, creating direct assignment for check-in access\");\n                    // Check for existing assignments for this user\n                    const existingAssignmentQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", existingUser.uid), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n                    const existingSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(existingAssignmentQuery);\n                    if (!existingSnapshot.empty) {\n                        return {\n                            success: false,\n                            error: \"This user already has access to the event\"\n                        };\n                    }\n                    // 🚨 FIX: Create direct assignment - no invitation needed!\n                    const assignment = {\n                        eventId,\n                        eventTitle,\n                        sessionId,\n                        sessionName,\n                        collaboratorType: \"user\",\n                        userPhone: sanitizedPhone,\n                        userId: existingUser.uid,\n                        userName: existingUser.name,\n                        permissions,\n                        accessLevel,\n                        assignedBy: inviterId,\n                        assignedByName: inviterName,\n                        assignedAt: new Date().toISOString(),\n                        isActive: true,\n                        status: \"active\",\n                        notes: \"Direct check-in access granted to registered user\",\n                        invitationMessage: sanitizedMessage,\n                        showOnEventPage\n                    };\n                    // Only add expiresAt if there's an expiry time (Firestore doesn't accept undefined)\n                    if (expiresInHours) {\n                        assignment.expiresAt = new Date(Date.now() + expiresInHours * 60 * 60 * 1000).toISOString();\n                    }\n                    const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), {\n                        ...assignment,\n                        createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n                    });\n                    await this.logSecurityEvent({\n                        type: \"event_collaboration\",\n                        userId: inviterId,\n                        eventId,\n                        action: \"user_direct_access_granted\",\n                        result: \"success\",\n                        details: {\n                            targetUserId: existingUser.uid,\n                            accessLevel,\n                            showOnEventPage,\n                            method: \"direct_assignment\"\n                        }\n                    });\n                    console.log(\"✅ Direct check-in access granted successfully\");\n                    return {\n                        success: true,\n                        assignmentId: docRef.id\n                    };\n                } else {\n                    console.log(\"ℹ️ User not found, creating invitation for unregistered user\");\n                    // Check for existing invitations for this phone\n                    const existingInvitationQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"invitedPhone\", \"==\", sanitizedPhone), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"pending\"));\n                    const invitationSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(existingInvitationQuery);\n                    if (!invitationSnapshot.empty) {\n                        console.log(\"\\uD83D\\uDD0D Found existing invitation. Debug info:\");\n                        const existingInvitation = invitationSnapshot.docs[0].data();\n                        console.log(\"\\uD83D\\uDD0D Existing invitation:\", {\n                            phone: existingInvitation.invitedPhone,\n                            status: existingInvitation.status,\n                            createdAt: existingInvitation.createdAt,\n                            eventTitle: existingInvitation.eventTitle\n                        });\n                        // 🚨 DEBUG: Let's still run the user search to see why it failed\n                        console.log(\"\\uD83D\\uDD0D Running user search debug even though invitation exists...\");\n                        const debugUserSearch = await this.findUserByPhone(collaboratorIdentifier);\n                        console.log(\"\\uD83D\\uDD0D Debug user search result:\", debugUserSearch);\n                        return {\n                            success: false,\n                            error: \"This user already has a pending invitation for this event\"\n                        };\n                    }\n                    // Create invitation for unregistered user (they'll get direct access when they register)\n                    const invitation = {\n                        eventId,\n                        eventTitle,\n                        sessionId,\n                        sessionName,\n                        collaboratorType: \"user\",\n                        invitedPhone: sanitizedPhone,\n                        invitedByUserId: inviterId,\n                        invitedByName: inviterName,\n                        accessLevel,\n                        permissions,\n                        message: sanitizedMessage,\n                        status: \"pending\",\n                        createdAt: new Date().toISOString(),\n                        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                        showOnEventPage\n                    };\n                    const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\"), {\n                        ...invitation,\n                        createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n                    });\n                    await this.logSecurityEvent({\n                        type: \"event_collaboration\",\n                        userId: inviterId,\n                        eventId,\n                        action: \"user_invitation_sent\",\n                        result: \"success\",\n                        details: {\n                            invitedPhone: sanitizedPhone,\n                            accessLevel,\n                            showOnEventPage\n                        }\n                    });\n                    console.log(\"✅ Invitation created for unregistered user\");\n                    return {\n                        success: true,\n                        invitationId: docRef.id\n                    };\n                }\n            }\n        } catch (error) {\n            console.error(\"Error sharing event:\", error);\n            return {\n                success: false,\n                error: \"Failed to share event\"\n            };\n        }\n    }\n    /**\n   * Remove session collaboration\n   */ static async removeSessionAccess(eventId, sessionId, assignmentId, removedByUserId) {\n        try {\n            const hasAccess = await this.verifyEventManagementAccess(eventId, removedByUserId);\n            if (!hasAccess) {\n                return {\n                    success: false,\n                    error: \"You do not have permission to remove access\"\n                };\n            }\n            const assignmentDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\", assignmentId));\n            if (!assignmentDoc.exists()) {\n                return {\n                    success: false,\n                    error: \"Assignment not found\"\n                };\n            }\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\", assignmentId), {\n                isActive: false,\n                status: \"expired\",\n                removedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                removedBy: removedByUserId\n            });\n            await this.logSecurityEvent({\n                type: \"event_collaboration\",\n                userId: removedByUserId,\n                eventId,\n                action: \"access_removed\",\n                result: \"success\",\n                details: {\n                    assignmentId\n                }\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error removing event access:\", error);\n            return {\n                success: false,\n                error: \"Failed to remove access\"\n            };\n        }\n    }\n    /**\n   * Get session collaborators\n   */ static async getSessionCollaborators(eventId, sessionId) {\n        try {\n            let collaboratorsQuery;\n            if (sessionId) {\n                collaboratorsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"sessionId\", \"==\", sessionId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n            } else {\n                collaboratorsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n            }\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(collaboratorsQuery);\n            const assignments = snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            // Deduplicate and filter expired\n            const collaboratorMap = new Map();\n            for (const assignment of assignments){\n                // Skip expired assignments\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    continue;\n                }\n                const key = assignment.collaboratorType === \"page\" ? \"page_\".concat(assignment.pageId) : \"user_\".concat(assignment.userId);\n                const existing = collaboratorMap.get(key);\n                if (!existing || new Date(assignment.assignedAt) > new Date(existing.assignedAt)) {\n                    collaboratorMap.set(key, assignment);\n                }\n            }\n            return Array.from(collaboratorMap.values());\n        } catch (error) {\n            console.error(\"Error fetching event collaborators:\", error);\n            return [];\n        }\n    }\n    /**\n   * Get events shared with user\n   */ static async getUserSharedEvents(userId) {\n        try {\n            console.log(\"\\uD83D\\uDD0D getUserSharedEvents called for userId: \".concat(userId.substring(0, 8), \"...\"));\n            // 🚨 CRITICAL FIX: Add proper user filtering to prevent downloading ALL collaborations\n            const sharedQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"userId\", \"==\", userId) // Direct user collaborations\n            );\n            // Also need to check page-based collaborations where user owns the page\n            const pageBasedQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"pageOwnerId\", \"==\", userId) // Page collaborations where user owns the page\n            );\n            console.log(\"\\uD83D\\uDD0D Executing Firestore queries...\");\n            const [userSnapshot, pageSnapshot] = await Promise.all([\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(sharedQuery),\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(pageBasedQuery)\n            ]);\n            console.log(\"\\uD83D\\uDD0D Query results: \".concat(userSnapshot.size, \" user collaborations, \").concat(pageSnapshot.size, \" page collaborations\"));\n            const managedEvents = [];\n            const checkinEvents = [];\n            // Process direct user collaborations\n            for (const docSnap of userSnapshot.docs){\n                const assignment = docSnap.data();\n                console.log(\"\\uD83D\\uDD0D Processing user collaboration: \".concat(assignment.eventTitle, \" (\").concat(assignment.accessLevel, \")\"));\n                // Check if expired\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    console.log(\"⏰ Assignment expired: \".concat(assignment.eventTitle, \" (expired at \").concat(assignment.expiresAt, \")\"));\n                    // Mark as expired in database\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(docSnap.ref, {\n                        isActive: false,\n                        status: \"expired\"\n                    });\n                    continue;\n                }\n                const eventInfo = {\n                    eventId: assignment.eventId,\n                    eventTitle: assignment.eventTitle,\n                    role: assignment.permissions.role,\n                    accessLevel: assignment.accessLevel\n                };\n                if (assignment.accessLevel === \"full_management\") {\n                    managedEvents.push(eventInfo);\n                    console.log(\"✅ Added to managed events: \".concat(assignment.eventTitle));\n                } else {\n                    checkinEvents.push(eventInfo);\n                    console.log(\"✅ Added to checkin events: \".concat(assignment.eventTitle));\n                }\n            }\n            // Process page-based collaborations\n            for (const docSnap of pageSnapshot.docs){\n                const assignment = docSnap.data();\n                console.log(\"\\uD83D\\uDD0D Processing page collaboration: \".concat(assignment.eventTitle, \" (\").concat(assignment.accessLevel, \") via page \").concat(assignment.pageName));\n                // Check if expired\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    console.log(\"⏰ Page assignment expired: \".concat(assignment.eventTitle, \" (expired at \").concat(assignment.expiresAt, \")\"));\n                    // Mark as expired in database\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(docSnap.ref, {\n                        isActive: false,\n                        status: \"expired\"\n                    });\n                    continue;\n                }\n                const eventInfo = {\n                    eventId: assignment.eventId,\n                    eventTitle: assignment.eventTitle,\n                    role: assignment.permissions.role,\n                    accessLevel: assignment.accessLevel\n                };\n                if (assignment.accessLevel === \"full_management\") {\n                    managedEvents.push(eventInfo);\n                    console.log(\"✅ Added page event to managed events: \".concat(assignment.eventTitle));\n                } else {\n                    checkinEvents.push(eventInfo);\n                    console.log(\"✅ Added page event to checkin events: \".concat(assignment.eventTitle));\n                }\n            }\n            // Remove duplicates (in case user has both direct and page access to same event)\n            const uniqueManaged = Array.from(new Map(managedEvents.map((event)=>[\n                    event.eventId,\n                    event\n                ])).values());\n            const uniqueCheckin = Array.from(new Map(checkinEvents.map((event)=>[\n                    event.eventId,\n                    event\n                ])).values());\n            console.log(\"\\uD83D\\uDD0D Final results: \".concat(uniqueManaged.length, \" managed events, \").concat(uniqueCheckin.length, \" checkin events\"));\n            return {\n                managedEvents: uniqueManaged,\n                checkinEvents: uniqueCheckin\n            };\n        } catch (error) {\n            console.error(\"❌ Error fetching user shared events:\", error);\n            return {\n                managedEvents: [],\n                checkinEvents: []\n            };\n        }\n    }\n    /**\n   * Accept event invitation\n   */ static async acceptEventInvitation(invitationId, userId, userName) {\n        try {\n            const invitationDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\", invitationId));\n            if (!invitationDoc.exists()) {\n                return {\n                    success: false,\n                    error: \"Invitation not found\"\n                };\n            }\n            const invitation = invitationDoc.data();\n            if (invitation.status !== \"pending\" || new Date(invitation.expiresAt) < new Date()) {\n                return {\n                    success: false,\n                    error: \"Invitation has expired or already been responded to\"\n                };\n            }\n            const assignment = {\n                eventId: invitation.eventId,\n                eventTitle: invitation.eventTitle,\n                sessionId: invitation.sessionId,\n                sessionName: invitation.sessionName,\n                collaboratorType: invitation.collaboratorType,\n                userPhone: invitation.invitedPhone,\n                userId,\n                userName,\n                permissions: invitation.permissions,\n                accessLevel: invitation.accessLevel,\n                assignedBy: invitation.invitedByUserId,\n                assignedByName: invitation.invitedByName,\n                assignedAt: new Date().toISOString(),\n                isActive: true,\n                status: \"active\",\n                notes: \"Accepted invitation: \".concat(invitation.message),\n                invitationMessage: invitation.message,\n                showOnEventPage: invitation.showOnEventPage\n            };\n            const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)());\n            // Update invitation status\n            batch.update((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\", invitationId), {\n                status: \"accepted\",\n                respondedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                invitedUserId: userId\n            });\n            // Create collaboration assignment\n            const assignmentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"));\n            batch.set(assignmentRef, {\n                ...assignment,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n            await batch.commit();\n            await this.logSecurityEvent({\n                type: \"event_collaboration\",\n                userId,\n                eventId: invitation.eventId,\n                action: \"invitation_accepted\",\n                result: \"success\",\n                details: {\n                    invitationId,\n                    accessLevel: invitation.accessLevel\n                }\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error accepting invitation:\", error);\n            return {\n                success: false,\n                error: \"Failed to accept invitation\"\n            };\n        }\n    }\n    /**\n   * Verify event access for user\n   */ static async verifyEventAccess(eventId, userId) {\n        try {\n            console.log(\"\\uD83D\\uDD0D verifyEventAccess: Checking access for user \".concat(userId.substring(0, 8), \"... to event \").concat(eventId));\n            // Get event data\n            const eventDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"events\", eventId));\n            if (!eventDoc.exists()) {\n                console.log(\"❌ verifyEventAccess: Event \".concat(eventId, \" not found\"));\n                return this.unauthorizedPermissions();\n            }\n            const eventData = eventDoc.data();\n            console.log(\"\\uD83D\\uDCC5 verifyEventAccess: Event found - \".concat(eventData.title));\n            // Check if user is event owner\n            if (eventData.organizationId === userId || eventData.creator && eventData.creator.userId === userId) {\n                console.log(\"✅ verifyEventAccess: User is event owner\");\n                return {\n                    canView: true,\n                    canCheckIn: true,\n                    canManageAttendees: true,\n                    canViewFinancials: true,\n                    canEditEvent: true,\n                    canViewReports: true,\n                    canSendCommunications: true,\n                    role: \"event_owner\"\n                };\n            }\n            // Check collaboration permissions\n            console.log(\"\\uD83D\\uDD0D verifyEventAccess: Checking collaboration permissions...\");\n            const collaborationQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventCollaboration\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"eventId\", \"==\", eventId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"isActive\", \"==\", true));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(collaborationQuery);\n            console.log(\"\\uD83D\\uDD0D verifyEventAccess: Found \".concat(snapshot.size, \" collaboration records\"));\n            for (const docSnap of snapshot.docs){\n                var _assignment_userId, _assignment_pageOwnerId;\n                const assignment = docSnap.data();\n                console.log(\"\\uD83D\\uDD0D verifyEventAccess: Checking assignment:\", {\n                    collaboratorType: assignment.collaboratorType,\n                    userId: (_assignment_userId = assignment.userId) === null || _assignment_userId === void 0 ? void 0 : _assignment_userId.substring(0, 8),\n                    pageOwnerId: (_assignment_pageOwnerId = assignment.pageOwnerId) === null || _assignment_pageOwnerId === void 0 ? void 0 : _assignment_pageOwnerId.substring(0, 8),\n                    accessLevel: assignment.accessLevel,\n                    isActive: assignment.isActive,\n                    expiresAt: assignment.expiresAt\n                });\n                // Check if expired\n                if (assignment.expiresAt && new Date(assignment.expiresAt) < new Date()) {\n                    console.log(\"⏰ verifyEventAccess: Assignment expired at \".concat(assignment.expiresAt));\n                    continue;\n                }\n                // Check if this assignment gives the user access\n                if (assignment.collaboratorType === \"page\" && assignment.pageOwnerId === userId) {\n                    console.log(\"✅ verifyEventAccess: Found page-based access for user\");\n                    return assignment.permissions;\n                } else if (assignment.collaboratorType === \"user\" && assignment.userId === userId) {\n                    console.log(\"✅ verifyEventAccess: Found direct user access\");\n                    return assignment.permissions;\n                }\n            }\n            console.log(\"❌ verifyEventAccess: No collaboration access found for user \".concat(userId.substring(0, 8), \"...\"));\n            return this.unauthorizedPermissions();\n        } catch (error) {\n            console.error(\"❌ verifyEventAccess: Error verifying event access:\", error);\n            return this.unauthorizedPermissions();\n        }\n    }\n    /**\n   * Get pending invitations for user phone\n   */ static async getUserPendingInvitations(userPhone) {\n        try {\n            const invitationsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"eventInvitations\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"invitedPhone\", \"==\", userPhone), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"pending\"));\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(invitationsQuery);\n            return snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n        } catch (error) {\n            console.error(\"Error fetching pending invitations:\", error);\n            return [];\n        }\n    }\n    /**\n   * Security logging\n   */ static async logSecurityEvent(event) {\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)((0,_infrastructure_firebase__WEBPACK_IMPORTED_MODULE_1__.db)(), \"securityEvents\"), {\n                ...event,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                source: \"event_collaboration_security\"\n            });\n        } catch (error) {\n            console.error(\"Error logging security event:\", error);\n        }\n    }\n    static unauthorizedPermissions() {\n        return {\n            canView: false,\n            canCheckIn: false,\n            canManageAttendees: false,\n            canViewFinancials: false,\n            canEditEvent: false,\n            canViewReports: false,\n            canSendCommunications: false,\n            role: \"unauthorized\"\n        };\n    }\n}\n/**\n   * Rate limiting for event collaboration invitations\n   */ EventCollaborationSecurity.invitationCounts = new Map();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/domains/events/services/collaboration.service.ts\n"));

/***/ })

}]);